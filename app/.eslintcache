[{"/home/ben/research/2020/11_november/potter_graph/app/src/index.js":"1","/home/ben/research/2020/11_november/potter_graph/app/src/Config.js":"2","/home/ben/research/2020/11_november/potter_graph/app/src/App.js":"3","/home/ben/research/2020/11_november/potter_graph/app/src/reportWebVitals.js":"4"},{"size":500,"mtime":1606505290967,"results":"5","hashOfConfig":"6"},{"size":5644,"mtime":1606601992332,"results":"7","hashOfConfig":"6"},{"size":2946,"mtime":1606599196034,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":1606505290967,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cby7cw",{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ben/research/2020/11_november/potter_graph/app/src/index.js",[],"/home/ben/research/2020/11_november/potter_graph/app/src/Config.js",["20","21","22","23"],"import React from 'react';\nimport { Button, ButtonGroup, Container, Dropdown, Form, ListGroup, ListGroupItem } from 'react-bootstrap';\n\n\nclass DataBuilder extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        var config = JSON.parse(require('./config.json'));\n        var data = JSON.parse(require('./data.json')) \n\n        this.state = {\n            config : this.buildconfig(config),\n            data : this.builddata(data),\n            query : [],\n            newQuery : null,\n            newData : true,\n            relations : config.EdgeTypes,\n            relationview : 'none'\n        };\n\n        this.buttonClick = this.buttonClick.bind(this);\n        this.handleClusterQuery = this.handleClusterQuery.bind(this);\n        this.getRelation = this.getRelation.bind(this);\n        // this.doData = this.doData.bind(this);\n\n        // this.componentDidUpdate = this.componentDidUpdate.bind(this);\n        // this.componentDidMount = this.componentDidUpdate.bind(this);\n    }\n\n    buildconfig(config) {\n        \n        var NodeTypes = {}\n    \n        config.NodeTypes.map( type => {\n            type.shape =  (\n                    <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                        <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                                fill : type.color}} ></circle>\n                    </symbol>\n                    )\n            NodeTypes[type.typeText] = type\n            \n        })\n        \n        var EdgeTypes = {}\n        \n        config.EdgeTypes.map( type => {\n            type.shape = (\n                    <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                        <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                    </symbol>\n            )\n            EdgeTypes[type.typeText] = type\n        })\n        \n        var PotterConfig =  {\n            NodeTypes: NodeTypes,\n            NodeSubtypes: {},\n            EdgeTypes: EdgeTypes\n          }\n          \n        return PotterConfig;\n    }\n\n    builddata(data) {  \n        return data\n    }\n\n    async getRelation() {\n\n        const response = await fetch('http://localhost:5001/cluster', {\n        method: 'POST', // or 'PUT'\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(this.state.query)\n        })\n\n        const data = await response.json()\n\n        this.setState({\n            data: this.builddata(data.data),\n            config: this.buildconfig(data.config)})\n\n      }\n    \n\n    buttonClick = (event) => {\n\n        if (this.state.newQuery) {\n            this.props.parentCallback({data: null,\n                config: null});\n            this.setState({ newQuery : false });\n            this.getRelation();\n\n        }\n        \n        this.props.parentCallback({data: this.state.data,\n                                    config: this.state.config});\n\n        event.preventDefault();\n    }\n\n    handleClusterQuery = (e) => {\n        this.state.query.push(e);\n        this.setState({ newQuery : true});\n    }\n\n    // componentDidUpdate() {\n\n    // }\n\n    // componentDidMount () {\n    //     // this.doData();\n    // }\n\n    onSelectRelation = (e) => {\n        this.setState({relationview : e.typeText})\n    } \n\n    render () {\n        return (\n\n            <Container>\n                <ListGroup style = {{ height : \"30em\", overflow : \"scroll\"}}>\n                    {this.state.relations.map(relation => {\n                        return (\n                        \n                        <ListGroupItem onClick = {(event) => this.onSelectRelation(relation)} style = {{backgroundColor : relation.color, color : \"white\"}}>\n\n                                <Form.Group>\n                                    <Form.Row>\n                                    <Form.Check inline \n                                                type=\"checkbox\" \n                                                style={{float: 'right'}}\n                                                onClick = {(event) => this.handleClusterQuery(relation.typeText)} />\n                                    \n                                    <Form.Label>\n                                        {relation.typeText}\n                                    </Form.Label>\n                                    </Form.Row>\n                                </Form.Group>\n                                </ListGroupItem>)\n                    })}\n                </ListGroup>\n                <Container style = {{ height : '30em', overflow : 'hidden'}}>\n                    {this.state.relationview}\n                </Container>\n                <Button onClick = {(e) => this.buttonClick(e)}> Get Data </Button>\n            </Container>\n\n            // <ButtonGroup>\n            //     <Dropdown>\n            //         <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            //             Dropdown Button\n            //         </Dropdown.Toggle>\n\n            //         <Dropdown.Menu >\n            //             <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster0' >cluster0</Dropdown.Item>\n            //             <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster1' >cluster1</Dropdown.Item>\n            //             <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster2' >cluster2</Dropdown.Item>\n            //         </Dropdown.Menu>\n            //     </Dropdown>\n                \n            // </ButtonGroup>\n            \n        )}\n}\n\n\nexport default DataBuilder;","/home/ben/research/2020/11_november/potter_graph/app/src/App.js",["24","25","26","27","28","29","30","31","32","33","34"],"// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      config: null,\n      selected: {},\n      graph: <div>{'no graph'}</div>\n    }\n    this.handleCallback = this.handleCallback.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n  }\n\n  /* Define custom graph editing methods here */\n  handleCallback = (childData) =>{\n    this.setState({\n                  graph: null,\n                  data: childData.data,\n                  config: childData.config})\n  }\n\n  componentDidUpdate () {\n    if(this.state.data){\n      var nodes = this.state.data.nodes;\n      var edges = this.state.data.edges;\n      var selected = this.state.selected;\n  \n      var NodeTypes = this.state.config.NodeTypes;\n      var NodeSubtypes = this.state.config.NodeSubtypes;\n      var EdgeTypes = this.state.config.EdgeTypes;\n      var graph = <GraphView  \n                    // ref='GraphView'\n                    nodeKey={NODE_KEY}\n                    nodes={nodes}\n                    edges={edges}\n                    selected={selected}\n                    nodeTypes={NodeTypes}\n                    nodeSubtypes={NodeSubtypes}\n                    edgeTypes={EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}\n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}/>\n                    \n      this.setState({data:null,\n                    graph: graph})\n    } \n  }\n\n  render() {\n    return (\n      <Container id='graph' style={{height: '1000px'}}>\n        <Row>\n          <Col>\n          <DataBuilder parentCallback = {this.handleCallback} />\n          </Col>\n          <Col>\n          {this.state.graph}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n\nexport default Graph;\n","/home/ben/research/2020/11_november/potter_graph/app/src/reportWebVitals.js",[],{"ruleId":"35","severity":1,"message":"36","line":2,"column":18,"nodeType":"37","messageId":"38","endLine":2,"endColumn":29},{"ruleId":"35","severity":1,"message":"39","line":2,"column":42,"nodeType":"37","messageId":"38","endLine":2,"endColumn":50},{"ruleId":"40","severity":1,"message":"41","line":36,"column":36,"nodeType":"42","messageId":"43","endLine":36,"endColumn":38},{"ruleId":"40","severity":1,"message":"41","line":49,"column":36,"nodeType":"42","messageId":"43","endLine":49,"endColumn":38},{"ruleId":"35","severity":1,"message":"44","line":3,"column":10,"nodeType":"37","messageId":"38","endLine":3,"endColumn":31},{"ruleId":"35","severity":1,"message":"45","line":3,"column":33,"nodeType":"37","messageId":"38","endLine":3,"endColumn":43},{"ruleId":"35","severity":1,"message":"46","line":3,"column":45,"nodeType":"37","messageId":"38","endLine":3,"endColumn":59},{"ruleId":"35","severity":1,"message":"47","line":3,"column":61,"nodeType":"37","messageId":"38","endLine":3,"endColumn":75},{"ruleId":"35","severity":1,"message":"48","line":13,"column":3,"nodeType":"37","messageId":"38","endLine":13,"endColumn":7},{"ruleId":"35","severity":1,"message":"49","line":14,"column":8,"nodeType":"37","messageId":"38","endLine":14,"endColumn":13},{"ruleId":"35","severity":1,"message":"50","line":15,"column":3,"nodeType":"37","messageId":"38","endLine":15,"endColumn":7},{"ruleId":"35","severity":1,"message":"51","line":16,"column":8,"nodeType":"37","messageId":"38","endLine":16,"endColumn":13},{"ruleId":"35","severity":1,"message":"52","line":17,"column":8,"nodeType":"37","messageId":"38","endLine":17,"endColumn":24},{"ruleId":"35","severity":1,"message":"53","line":18,"column":3,"nodeType":"37","messageId":"38","endLine":18,"endColumn":18},{"ruleId":"35","severity":1,"message":"54","line":19,"column":3,"nodeType":"37","messageId":"38","endLine":19,"endColumn":13},"no-unused-vars","'ButtonGroup' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'InteractiveForceGraph' is defined but never used.","'ForceGraph' is defined but never used.","'ForceGraphNode' is defined but never used.","'ForceGraphLink' is defined but never used.","'Edge' is defined but never used.","'IEdge' is defined but never used.","'Node' is defined but never used.","'INode' is defined but never used.","'LayoutEngineType' is defined but never used.","'BwdlTransformer' is defined but never used.","'GraphUtils' is defined but never used."]