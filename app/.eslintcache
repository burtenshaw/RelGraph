[{"/home/ben/research/2020/11_november/potter_graph/app/src/index.js":"1","/home/ben/research/2020/11_november/potter_graph/app/src/Config.js":"2","/home/ben/research/2020/11_november/potter_graph/app/src/App.js":"3","/home/ben/research/2020/11_november/potter_graph/app/src/reportWebVitals.js":"4"},{"size":500,"mtime":1606505290967,"results":"5","hashOfConfig":"6"},{"size":9854,"mtime":1606751267233,"results":"7","hashOfConfig":"6"},{"size":4524,"mtime":1606751078529,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":1606505290967,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cby7cw",{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ben/research/2020/11_november/potter_graph/app/src/index.js",[],"/home/ben/research/2020/11_november/potter_graph/app/src/Config.js",["19","20","21","22"],"/home/ben/research/2020/11_november/potter_graph/app/src/App.js",["23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39"],"// import logo from './logo.svg';\nimport React from 'react';\nimport { unmountComponentAtNode } from 'react-dom';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\nimport { Button } from 'react-bootstrap';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    this.state = {\n      graph: data,\n      config: this.buildconfig(config),\n      selected: {}\n    }\n    this.handleCallback = this.handleCallback.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n    // this.onSelectPanNode = this.onSelectPanNode.bind(this)\n    // this.onSelectEdge = this.onSelectEdge.bind(this)\n    // this.componentDidMount = this.componentDidMount.bind(this)\n\n    this.GraphView = React.createRef();\n\n  }\n\n  componentDidUpdate() {\n    if (this.state.newQuery) {\n      // this.setState({ data : {nodes : null, selected : null, edge : null}})\n      this.setState({newQuery : false});\n      \n      var graph = this.state.graph;\n\n      var newEdges = this.state.graph.edges.filter(e => !this.state.query.includes(e.type));\n      console.log(newEdges.length);\n      var deleteEdgeIds = this.state.graph.edges.filter(e => this.state.query.includes(e.type))\n      console.log(deleteEdgeIds.length);\n\n      deleteEdgeIds.map( edge => {\n        this.GraphView.deleteEdgeBySourceTarget(edge.source, edge.target)\n\n      })\n    }\n  }\n\n  /* Define custom graph editing metho  ds here */\n  handleCallback = (childData) =>{\n    this.setState({query: childData.query, newQuery : true});\n\n  }\n\n  buildconfig(config) {\n        \n    var NodeTypes = {}\n\n    config.NodeTypes.map( type => {\n        type.shape =  (\n                <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                    <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                            fill : type.color}} ></circle>\n                </symbol>\n                )\n        NodeTypes[type.typeText] = type\n        \n    })\n    \n    var EdgeTypes = {}\n    \n    config.EdgeTypes.map( type => {\n        type.shape = (\n                <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                    <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                </symbol>\n        )\n        EdgeTypes[type.typeText] = type\n    })\n    \n    var PotterConfig =  {\n        NodeTypes: NodeTypes,\n        NodeSubtypes: {},\n        EdgeTypes: EdgeTypes\n      }\n      \n    return PotterConfig;\n  }\n\n  render() {\n\n    return (\n      <Container id='graph' style={{height: '100%'}}>\n        <Row>\n          <Col md={6}>\n            <DataBuilder ref={this.GraphView} parentCallback = {this.handleCallback} />\n          </Col>\n          <Col md={6}>\n            <GraphView  \n              ref={el => (this.GraphView = el)}\n              nodeKey={NODE_KEY}\n              nodes={this.state.graph.nodes}\n              edges={this.state.graph.edges}\n              selected={this.state.selected}\n              nodeTypes={this.state.config.NodeTypes}\n              nodeSubtypes={this.state.config.NodeSubtypes}\n              edgeTypes={this.state.config.EdgeTypes}\n              onSelectNode={this.onSelectNode}\n              onCreateNode={this.onCreateNode}\n              onUpdateNode={this.onUpdateNode}\n              onDeleteNode={this.onDeleteNode}\n              onSelectEdge={this.onSelectEdge}\n              onCreateEdge={this.onCreateEdge}  \n              onSwapEdge={this.onSwapEdge}\n              onDeleteEdge={this.onDeleteEdge}\n              layoutEngineType={'SnapToGrid'}/>\n          </Col>\n        </Row>\n        \n      </Container>\n    );\n  }\n\n}\n\n\n\nexport default Graph;\n","/home/ben/research/2020/11_november/potter_graph/app/src/reportWebVitals.js",[],{"ruleId":"40","severity":1,"message":"41","line":2,"column":42,"nodeType":"42","messageId":"43","endLine":2,"endColumn":50},{"ruleId":"44","severity":1,"message":"45","line":7,"column":5,"nodeType":"46","messageId":"47","endLine":9,"endColumn":6},{"ruleId":"48","severity":1,"message":"49","line":133,"column":36,"nodeType":"50","messageId":"51","endLine":133,"endColumn":38},{"ruleId":"48","severity":1,"message":"49","line":146,"column":36,"nodeType":"50","messageId":"51","endLine":146,"endColumn":38},{"ruleId":"40","severity":1,"message":"52","line":3,"column":10,"nodeType":"42","messageId":"43","endLine":3,"endColumn":32},{"ruleId":"40","severity":1,"message":"53","line":4,"column":10,"nodeType":"42","messageId":"43","endLine":4,"endColumn":31},{"ruleId":"40","severity":1,"message":"54","line":4,"column":33,"nodeType":"42","messageId":"43","endLine":4,"endColumn":43},{"ruleId":"40","severity":1,"message":"55","line":4,"column":45,"nodeType":"42","messageId":"43","endLine":4,"endColumn":59},{"ruleId":"40","severity":1,"message":"56","line":4,"column":61,"nodeType":"42","messageId":"43","endLine":4,"endColumn":75},{"ruleId":"40","severity":1,"message":"57","line":14,"column":3,"nodeType":"42","messageId":"43","endLine":14,"endColumn":7},{"ruleId":"40","severity":1,"message":"58","line":15,"column":8,"nodeType":"42","messageId":"43","endLine":15,"endColumn":13},{"ruleId":"40","severity":1,"message":"59","line":16,"column":3,"nodeType":"42","messageId":"43","endLine":16,"endColumn":7},{"ruleId":"40","severity":1,"message":"60","line":17,"column":8,"nodeType":"42","messageId":"43","endLine":17,"endColumn":13},{"ruleId":"40","severity":1,"message":"61","line":18,"column":8,"nodeType":"42","messageId":"43","endLine":18,"endColumn":24},{"ruleId":"40","severity":1,"message":"62","line":19,"column":3,"nodeType":"42","messageId":"43","endLine":19,"endColumn":18},{"ruleId":"40","severity":1,"message":"63","line":20,"column":3,"nodeType":"42","messageId":"43","endLine":20,"endColumn":13},{"ruleId":"40","severity":1,"message":"64","line":22,"column":10,"nodeType":"42","messageId":"43","endLine":22,"endColumn":16},{"ruleId":"40","severity":1,"message":"65","line":54,"column":11,"nodeType":"42","messageId":"43","endLine":54,"endColumn":16},{"ruleId":"48","severity":1,"message":"49","line":61,"column":31,"nodeType":"50","messageId":"51","endLine":61,"endColumn":33},{"ruleId":"48","severity":1,"message":"49","line":78,"column":32,"nodeType":"50","messageId":"51","endLine":78,"endColumn":34},{"ruleId":"48","severity":1,"message":"49","line":91,"column":32,"nodeType":"50","messageId":"51","endLine":91,"endColumn":34},"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'unmountComponentAtNode' is defined but never used.","'InteractiveForceGraph' is defined but never used.","'ForceGraph' is defined but never used.","'ForceGraphNode' is defined but never used.","'ForceGraphLink' is defined but never used.","'Edge' is defined but never used.","'IEdge' is defined but never used.","'Node' is defined but never used.","'INode' is defined but never used.","'LayoutEngineType' is defined but never used.","'BwdlTransformer' is defined but never used.","'GraphUtils' is defined but never used.","'Button' is defined but never used.","'graph' is assigned a value but never used."]