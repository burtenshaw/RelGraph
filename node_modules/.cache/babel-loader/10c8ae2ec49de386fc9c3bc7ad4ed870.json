{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/Config.js\";\nimport React from 'react';\nimport { Button, ButtonGroup, Container, Dropdown, Form, ListGroup, ListGroupItem, OverlayTrigger, Popover, Tab, Tabs } from 'react-bootstrap';\nimport Highlighter from \"react-highlight-words\";\n\nclass RelationView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    var relation = this.props.relations;\n    return /*#__PURE__*/_jsxDEV(Tabs, {\n      defaultActiveKey: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"info\",\n        title: \"Relation Info\",\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: [/*#__PURE__*/_jsxDEV(ListGroupItem, {\n            children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-secondary\",\n                children: \"source\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-secondary\",\n                children: relation.top_sentence\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 24,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-secondary\",\n                children: \"target\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n            children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-secondary\",\n                children: \"size\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-secondary\",\n                children: relation.size\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n            children: relation.key_words.map(kw => {\n              return /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-secondary\",\n                style: {\n                  margin: '2px'\n                },\n                children: kw\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 49\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"profile\",\n        title: \"Examples\",\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: relation.relations.map(r => {\n            return /*#__PURE__*/_jsxDEV(ListGroupItem, {\n              children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n                className: \"d-flex\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outline-secondary\",\n                  children: r.s\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n                  trigger: \"click\",\n                  placement: \"top\",\n                  overlay: /*#__PURE__*/_jsxDEV(Popover, {\n                    id: `popover-positioned-top`,\n                    children: [/*#__PURE__*/_jsxDEV(Popover.Title, {\n                      as: \"h3\",\n                      children: \"book placement\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 60,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Popover.Content, {\n                      children: /*#__PURE__*/_jsxDEV(Highlighter, {\n                        highlightClassName: \"highlighted\",\n                        searchWords: [r.rc],\n                        autoEscape: true,\n                        textToHighlight: r.p\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 62,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 61,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 49\n                  }, this),\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    block: true,\n                    variant: \"outline-secondary\",\n                    children: [r.rc.slice(0, 20), \"...\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 45\n                  }, this)\n                }, 'paragraph', false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outline-secondary\",\n                  children: r.t\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nclass DataBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonClick = event => {\n      if (this.state.newQuery) {// this.props.parentCallback({data: null,\n        //     config: null});\n        // this.setState({ newQuery : false });\n        // this.getRelation();\n      } // this.props.parentCallback({data: this.state.data,\n      //                             config: this.state.config});\n      // event.preventDefault();\n\n    };\n\n    this.handleClusterQuery = event => {\n      this.state.query.push(e);\n      this.setState({\n        newQuery: true\n      });\n      this.props.parentCallback({\n        query: this.state.query\n      });\n      event.preventDefault();\n    };\n\n    this.onSelectRelation = e => {\n      this.setState({\n        relationid: parseInt(e.cluster)\n      });\n    };\n\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    var relationslist = JSON.parse(require('./relations.json'));\n    this.state = {\n      config: this.buildconfig(config),\n      data: this.builddata(data),\n      query: [],\n      newQuery: null,\n      newData: true,\n      relations: config.EdgeTypes,\n      relationview: null,\n      relationid: null,\n      relationslist: relationslist\n    };\n    this.buttonClick = this.buttonClick.bind(this);\n    this.handleClusterQuery = this.handleClusterQuery.bind(this);\n    this.getRelation = this.getRelation.bind(this);\n    this.onSelectRelation = this.onSelectRelation.bind(this); // this.doData = this.doData.bind(this);\n    // this.componentDidUpdate = this.componentDidUpdate.bind(this);\n    // this.componentDidMount = this.componentDidUpdate.bind(this);\n  }\n\n  buildconfig(config) {\n    var NodeTypes = {};\n    config.NodeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\",\n          style: {\n            color: '#ffffff',\n            fill: type.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this);\n      NodeTypes[type.typeText] = type;\n    });\n    var EdgeTypes = {};\n    config.EdgeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 200 200\",\n        id: type.typeText,\n        label_from: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"100\",\n          cy: \"100\",\n          r: \"45\",\n          fill: type.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this);\n      EdgeTypes[type.typeText] = type;\n    });\n    var PotterConfig = {\n      NodeTypes: NodeTypes,\n      NodeSubtypes: {},\n      EdgeTypes: EdgeTypes\n    };\n    return PotterConfig;\n  }\n\n  builddata(data) {\n    return data;\n  }\n\n  async getRelation() {\n    const response = await fetch('http://localhost:5000/cluster', {\n      method: 'POST',\n      // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state.query)\n    });\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      data: this.builddata(data.data),\n      config: this.buildconfig(data.config)\n    });\n  }\n\n  // componentDidMount () {\n  //     this.props.parentCallback({data: this.state.data,\n  //         config: this.state.config});\n  // }\n  render() {\n    var relationview = this.state.relationid ? /*#__PURE__*/_jsxDEV(RelationView, {\n      relations: this.state.relationslist[this.state.relationid]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 54\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 135\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(ListGroup, {\n        style: {\n          height: \"30em\",\n          overflow: \"scroll\"\n        },\n        children: this.state.relations.map(relation => {\n          return /*#__PURE__*/_jsxDEV(ListGroupItem, {\n            onClick: event => this.onSelectRelation(relation),\n            style: {\n              backgroundColor: relation.color,\n              color: \"white\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                  inline: true,\n                  type: \"checkbox\",\n                  style: {\n                    float: 'right'\n                  },\n                  onClick: event => this.handleClusterQuery(relation.typeText)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: relation.typeText\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          height: '30em',\n          overflow: 'scroll'\n        },\n        children: relationview\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: e => this.buttonClick(e),\n          children: \" Get Data \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DataBuilder;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/Config.js"],"names":["React","Button","ButtonGroup","Container","Dropdown","Form","ListGroup","ListGroupItem","OverlayTrigger","Popover","Tab","Tabs","Highlighter","RelationView","Component","constructor","props","render","relation","relations","top_sentence","size","key_words","map","kw","margin","r","s","rc","p","slice","t","DataBuilder","buttonClick","event","state","newQuery","handleClusterQuery","query","push","e","setState","parentCallback","preventDefault","onSelectRelation","relationid","parseInt","cluster","config","JSON","parse","require","data","relationslist","buildconfig","builddata","newData","EdgeTypes","relationview","bind","getRelation","NodeTypes","type","shape","typeText","color","fill","PotterConfig","NodeSubtypes","response","fetch","method","headers","body","stringify","json","console","log","height","overflow","backgroundColor","float"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, ButtonGroup, Container, Dropdown, Form, ListGroup, ListGroupItem, OverlayTrigger, Popover, Tab, Tabs } from 'react-bootstrap';\nimport Highlighter from \"react-highlight-words\";\n\nclass RelationView extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render () {\n\n        var relation = this.props.relations;\n\n        return (\n\n                <Tabs defaultActiveKey=\"info\" >\n                <Tab eventKey=\"info\" title=\"Relation Info\">\n\n                    <ListGroup>\n                        <ListGroupItem>\n                            <ButtonGroup>\n                                <Button variant = 'outline-secondary' >source</Button>\n                                <Button variant = 'outline-secondary' >{relation.top_sentence}</Button>\n                                <Button variant = 'outline-secondary' >target</Button>\n                            </ButtonGroup>\n                        </ListGroupItem>\n                        <ListGroupItem>\n                        <ButtonGroup>\n                                <Button variant = 'outline-secondary' >size</Button>\n                                <Button variant = 'outline-secondary' >{relation.size}</Button>\n                            </ButtonGroup>\n                        </ListGroupItem>\n                        <ListGroupItem>\n\n                            {relation.key_words.map(kw => {\n                                        return (<Button variant = 'outline-secondary' style={{margin : '2px'}}>{kw}</Button>)\n                            }\n                                \n                                )}\n                        </ListGroupItem>\n                    </ListGroup>\n\n                </Tab>\n                <Tab eventKey=\"profile\" title=\"Examples\">\n                    <ListGroup>\n                        {relation.relations.map( r => {\n                            return (\n                                <ListGroupItem>\n                                    <ButtonGroup className=\"d-flex\">\n                                        <Button variant = 'outline-secondary'>{r.s}</Button>\n\n\n                                        <OverlayTrigger\n                                            trigger=\"click\"\n                                            key='paragraph'\n                                            placement='top'\n                                            overlay={\n                                                <Popover id={`popover-positioned-top`}>\n                                                <Popover.Title as=\"h3\">book placement</Popover.Title>\n                                                <Popover.Content>\n                                                <Highlighter\n                                                        highlightClassName=\"highlighted\"\n                                                        searchWords={[r.rc]}\n                                                        autoEscape={true}\n                                                        textToHighlight={r.p}\n                                                    />\n                                                </Popover.Content>\n                                                </Popover>\n                                            }\n                                            >\n                                            <Button block variant = 'outline-secondary'>{r.rc.slice(0,20)}...</Button>\n                                            </OverlayTrigger>\n                                            \n                                            <Button variant = 'outline-secondary'>{r.t}</Button>\n                                        {/* add overlay */}\n                                    </ButtonGroup>\n                                </ListGroupItem>\n                            )\n                    })}     \n                    </ListGroup>            \n                </Tab>\n\n                </Tabs>\n            \n        )\n    }\n\n\n}\n\nclass DataBuilder extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        var config = JSON.parse(require('./config.json'));\n        var data = JSON.parse(require('./data.json'));\n        var relationslist = JSON.parse(require('./relations.json'));\n        \n        this.state = {\n            config : this.buildconfig(config),\n            data : this.builddata(data),\n            query : [],\n            newQuery : null,\n            newData : true,\n            relations : config.EdgeTypes,\n            relationview : null,\n            relationid : null,\n            relationslist :relationslist\n        };\n\n        this.buttonClick = this.buttonClick.bind(this);\n        this.handleClusterQuery = this.handleClusterQuery.bind(this);\n        this.getRelation = this.getRelation.bind(this);\n        this.onSelectRelation = this.onSelectRelation.bind(this);\n        // this.doData = this.doData.bind(this);\n\n        // this.componentDidUpdate = this.componentDidUpdate.bind(this);\n        // this.componentDidMount = this.componentDidUpdate.bind(this);\n    }\n\n    buildconfig(config) {\n        \n        var NodeTypes = {}\n    \n        config.NodeTypes.map( type => {\n            type.shape =  (\n                    <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                        <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                                fill : type.color}} ></circle>\n                    </symbol>\n                    )\n            NodeTypes[type.typeText] = type\n            \n        })\n        \n        var EdgeTypes = {}\n        \n        config.EdgeTypes.map( type => {\n            type.shape = (\n                    <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                        <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                    </symbol>\n            )\n            EdgeTypes[type.typeText] = type\n        })\n        \n        var PotterConfig =  {\n            NodeTypes: NodeTypes,\n            NodeSubtypes: {},\n            EdgeTypes: EdgeTypes\n          }\n          \n        return PotterConfig;\n    }\n\n    builddata(data) { \n        return data\n    }\n\n    async getRelation() {\n\n        const response = await fetch('http://localhost:5000/cluster', {\n        method: 'POST', // or 'PUT'\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(this.state.query)\n        })\n\n        const data = await response.json()\n\n        console.log(data)\n\n        this.setState({\n            data: this.builddata(data.data),\n            config: this.buildconfig(data.config)})\n\n      }\n    \n\n    buttonClick = (event) => {\n\n        if (this.state.newQuery) {\n            // this.props.parentCallback({data: null,\n            //     config: null});\n            // this.setState({ newQuery : false });\n            // this.getRelation();\n        }\n        \n        // this.props.parentCallback({data: this.state.data,\n        //                             config: this.state.config});\n\n        // event.preventDefault();\n    }\n\n\n    handleClusterQuery = (event) => {\n        this.state.query.push(e);\n        this.setState({ newQuery : true});\n        this.props.parentCallback({query: this.state.query});\n        event.preventDefault();\n    }\n\n\n    onSelectRelation = (e) => {\n        this.setState({relationid : parseInt(e.cluster)})   \n        \n    }\n\n    // componentDidMount () {\n    //     this.props.parentCallback({data: this.state.data,\n    //         config: this.state.config});\n    // }\n\n    render () {\n\n        var relationview = (this.state.relationid) ? <RelationView relations = {this.state.relationslist[this.state.relationid]} /> : <div></div>\n\n        return (\n\n            <Container>\n                <ListGroup style = {{ height : \"30em\", overflow : \"scroll\"}}>\n                    {this.state.relations.map(relation => {\n                        return (\n                        <ListGroupItem onClick = {(event) => this.onSelectRelation(relation)} style = {{backgroundColor : relation.color, color : \"white\"}}>\n                            <Form.Group>\n                                <Form.Row>\n                                <Form.Check inline \n                                            type=\"checkbox\" \n                                            style={{float: 'right'}}\n                                            onClick = {(event) => this.handleClusterQuery(relation.typeText)} />\n                                \n                                <Form.Label>\n                                    {relation.typeText}\n                                </Form.Label>\n                                </Form.Row>\n                            </Form.Group>\n                        </ListGroupItem>\n                                )\n                    })}\n                </ListGroup>\n                <Container style = {{ height : '30em', overflow : 'scroll'}}>\n                    {relationview}\n                </Container>\n                <ButtonGroup>\n                    <Button onClick = {(e) => this.buttonClick(e)}> Get Data </Button>\n                </ButtonGroup>\n                \n            </Container>\n            \n        )}\n}\n\n\nexport default DataBuilder;"]},"metadata":{},"sourceType":"module"}