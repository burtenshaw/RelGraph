{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph'; // var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.setState({\n        graph: null\n      });\n      var nodes = this.state.data.nodes;\n      var edges = this.state.data.edges;\n      var selected = this.state.selected;\n      var NodeTypes = childData.config.config.NodeTypes;\n      var NodeSubtypes = this.state.config.NodeSubtypes;\n      var EdgeTypes = this.state.config.EdgeTypes;\n\n      var graph = /*#__PURE__*/_jsxDEV(GraphView // ref='GraphView'\n      , {\n        nodeKey: NODE_KEY,\n        nodes: nodes,\n        edges: edges,\n        selected: selected,\n        nodeTypes: NodeTypes,\n        nodeSubtypes: NodeSubtypes,\n        edgeTypes: EdgeTypes,\n        onSelectNode: this.onSelectNode,\n        onCreateNode: this.onCreateNode,\n        onUpdateNode: this.onUpdateNode,\n        onDeleteNode: this.onDeleteNode,\n        onSelectEdge: this.onSelectEdge,\n        onCreateEdge: this.onCreateEdge,\n        onSwapEdge: this.onSwapEdge,\n        onDeleteEdge: this.onDeleteEdge\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this);\n\n      this.setState({\n        graph: graph,\n        data: null\n      });\n    };\n\n    this.state = {\n      data: null,\n      config: null,\n      selected: {},\n      graph: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: 'no graph'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }, this)\n    };\n    this.handleCallback = this.handleCallback.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n  }\n  /* Define custom graph editing methods here */\n\n\n  componentDidUpdate() {\n    if (this.state.data) {// this.setState({graph: null})\n      // var nodes = this.state.data.nodes;\n      // var edges = this.state.data.edges;\n      // var selected = this.state.selected;\n      // var NodeTypes = this.state.config.NodeTypes;\n      // var NodeSubtypes = this.state.config.NodeSubtypes;\n      // var EdgeTypes = this.state.config.EdgeTypes;\n      // var graph = <GraphView  \n      //               // ref='GraphView'\n      //               nodeKey={NODE_KEY}\n      //               nodes={nodes}\n      //               edges={edges}\n      //               selected={selected}\n      //               nodeTypes={NodeTypes}\n      //               nodeSubtypes={NodeSubtypes}\n      //               edgeTypes={EdgeTypes}\n      //               onSelectNode={this.onSelectNode}\n      //               onCreateNode={this.onCreateNode}\n      //               onUpdateNode={this.onUpdateNode}\n      //               onDeleteNode={this.onDeleteNode}\n      //               onSelectEdge={this.onSelectEdge}\n      //               onCreateEdge={this.onCreateEdge}\n      //               onSwapEdge={this.onSwapEdge}\n      //               onDeleteEdge={this.onDeleteEdge}/>\n      // this.setState({graph: graph, data: null})\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      id: \"graph\",\n      style: {\n        height: '1000px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(DataBuilder, {\n            parentCallback: this.handleCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: this.state.graph\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/App.js"],"names":["React","InteractiveForceGraph","ForceGraph","ForceGraphNode","ForceGraphLink","Container","DataBuilder","Col","Row","GraphView","Edge","Node","BwdlTransformer","GraphUtils","NODE_KEY","Graph","Component","constructor","props","handleCallback","childData","setState","graph","nodes","state","data","edges","selected","NodeTypes","config","NodeSubtypes","EdgeTypes","onSelectNode","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge","bind","componentDidUpdate","render","height"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      config: null,\n      selected: {},\n      graph: <div>{'no graph'}</div>\n    }\n    this.handleCallback = this.handleCallback.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n  }\n\n  /* Define custom graph editing methods here */\n  handleCallback = (childData) =>{\n\n    this.setState({graph: null})\n\n    var nodes = this.state.data.nodes;\n    var edges = this.state.data.edges;\n    var selected = this.state.selected;\n\n    var NodeTypes = childData.config.config.NodeTypes;\n    var NodeSubtypes = this.state.config.NodeSubtypes;\n    var EdgeTypes = this.state.config.EdgeTypes;\n    var graph = <GraphView  \n                  // ref='GraphView'\n                  nodeKey={NODE_KEY}\n                  nodes={nodes}\n                  edges={edges}\n                  selected={selected}\n                  nodeTypes={NodeTypes}\n                  nodeSubtypes={NodeSubtypes}\n                  edgeTypes={EdgeTypes}\n                  onSelectNode={this.onSelectNode}\n                  onCreateNode={this.onCreateNode}\n                  onUpdateNode={this.onUpdateNode}\n                  onDeleteNode={this.onDeleteNode}\n                  onSelectEdge={this.onSelectEdge}\n                  onCreateEdge={this.onCreateEdge}\n                  onSwapEdge={this.onSwapEdge}\n                  onDeleteEdge={this.onDeleteEdge}/>\n                  \n    this.setState({graph: graph, data: null})\n  }\n\n  componentDidUpdate () {\n    if(this.state.data){\n      \n      // this.setState({graph: null})\n\n      // var nodes = this.state.data.nodes;\n      // var edges = this.state.data.edges;\n      // var selected = this.state.selected;\n  \n      // var NodeTypes = this.state.config.NodeTypes;\n      // var NodeSubtypes = this.state.config.NodeSubtypes;\n      // var EdgeTypes = this.state.config.EdgeTypes;\n      // var graph = <GraphView  \n      //               // ref='GraphView'\n      //               nodeKey={NODE_KEY}\n      //               nodes={nodes}\n      //               edges={edges}\n      //               selected={selected}\n      //               nodeTypes={NodeTypes}\n      //               nodeSubtypes={NodeSubtypes}\n      //               edgeTypes={EdgeTypes}\n      //               onSelectNode={this.onSelectNode}\n      //               onCreateNode={this.onCreateNode}\n      //               onUpdateNode={this.onUpdateNode}\n      //               onDeleteNode={this.onDeleteNode}\n      //               onSelectEdge={this.onSelectEdge}\n      //               onCreateEdge={this.onCreateEdge}\n      //               onSwapEdge={this.onSwapEdge}\n      //               onDeleteEdge={this.onDeleteEdge}/>\n                    \n      // this.setState({graph: graph, data: null})\n    } \n  }\n\n  render() {\n    return (\n      <Container id='graph' style={{height: '1000px'}}>\n        <Row>\n          <Col>\n          <DataBuilder parentCallback = {this.handleCallback} />\n          </Col>\n          <Col>\n          {this.state.graph}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}