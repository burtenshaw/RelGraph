{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph'; // var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.setState({\n        query: childData.query,\n        newQuery: true\n      });\n    };\n\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    this.state = {\n      graph: data,\n      config: this.buildconfig(config),\n      selected: {}\n    };\n    this.handleCallback = this.handleCallback.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this); // this.onSelectNode = this.onSelectNode.bind(this)\n    // this.onSelectEdge = this.onSelectEdge.bind(this)\n    // this.componentDidMount = this.componentDidMount.bind(this)\n  } // Helper to find the index of a given node\n\n\n  getNodeIndex(searchNode) {\n    return this.state.graph.nodes.findIndex(node => {\n      return node[NODE_KEY] === searchNode[NODE_KEY];\n    });\n  } // Helper to find the index of a given edge\n\n\n  getEdgeIndex(searchEdge) {\n    return this.state.graph.edges.findIndex(edge => {\n      return edge.source === searchEdge.source && edge.target === searchEdge.target;\n    });\n  }\n\n  removeEdgeElement(sourcetarget) {\n    const id = `${source}-${target}`;\n    GraphUtils.removeElementFromDom(`edge-${id}-container`, this.viewWrapper.current);\n  }\n\n  componentDidUpdate() {\n    if (this.state.newQuery) {\n      // this.setState({ data : {nodes : null, selected : null, edge : null}})\n      this.setState({\n        newQuery: false\n      });\n      var graph = this.state.graph;\n      var newEdges = this.state.graph.edges.filter(e => !this.state.query.includes(e.type));\n      console.log(newEdges.length);\n      var deleteEdgeIds = this.state.graph.edges.filter(e => this.state.query.includes(e.type));\n      console.log(deleteEdgeIds.length);\n      deleteEdgeIds.map(edgeid => {\n        // var r = GraphUtils.removeElementFromDom(edgeid)\n        console.log(edgeid);\n        consol.log(r);\n      });\n      graph.edges = newEdges; // this.setState({ graph : graph})\n      // var nodeIds = newNodes.flatMap((e) => [e.source, e.target]);\n      // var newNodes = data.nodes.filter(n => !nodeIds.includes(n.id));\n      // var deletenodeIds = newNodes.flatMap((e) => [e.source, e.target]);\n      // console.log(deletenodeIds);\n      // console.log( newNodes )\n      // deletenodeIds.map( nodeid => {\n      //   GraphUtils.removeElementFromDom(nodeid)\n      //   console.log(nodeid)\n      // })\n      // this.state.data.nodes = newNodes;\n    }\n  }\n  /* Define custom graph editing metho  ds here */\n\n\n  buildconfig(config) {\n    var NodeTypes = {};\n    config.NodeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\",\n          style: {\n            color: '#ffffff',\n            fill: type.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this);\n      NodeTypes[type.typeText] = type;\n    });\n    var EdgeTypes = {};\n    config.EdgeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 200 200\",\n        id: type.typeText,\n        label_from: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"100\",\n          cy: \"100\",\n          r: \"45\",\n          fill: type.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this);\n      EdgeTypes[type.typeText] = type;\n    });\n    var PotterConfig = {\n      NodeTypes: NodeTypes,\n      NodeSubtypes: {},\n      EdgeTypes: EdgeTypes\n    };\n    return PotterConfig;\n  } // onSelectNode = (viewNode) => {\n  //   // Deselect events will send Null viewNode\n  //   this.setState({ selected: viewNode });\n  // }\n  // onSelectEdge = (edge) => {\n  //   // Deselect events will send Null viewNode\n  //   this.setState({ selected: edge });\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      id: \"graph\",\n      style: {\n        height: '1000px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(DataBuilder, {\n            parentCallback: this.handleCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(GraphView, {\n            ref: \"GraphView\",\n            nodeKey: NODE_KEY,\n            nodes: this.state.graph.nodes,\n            edges: this.state.graph.edges,\n            selected: this.state.selected,\n            nodeTypes: this.state.config.NodeTypes,\n            nodeSubtypes: this.state.config.NodeSubtypes,\n            edgeTypes: this.state.config.EdgeTypes,\n            onSelectNode: this.onSelectNode,\n            onCreateNode: this.onCreateNode,\n            onUpdateNode: this.onUpdateNode,\n            onDeleteNode: this.onDeleteNode,\n            onSelectEdge: this.onSelectEdge,\n            onCreateEdge: this.onCreateEdge,\n            onSwapEdge: this.onSwapEdge,\n            onDeleteEdge: this.onDeleteEdge,\n            layoutEngineType: 'SnapToGrid'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/App.js"],"names":["React","InteractiveForceGraph","ForceGraph","ForceGraphNode","ForceGraphLink","Container","DataBuilder","Col","Row","GraphView","Edge","Node","BwdlTransformer","GraphUtils","NODE_KEY","Graph","Component","constructor","props","handleCallback","childData","setState","query","newQuery","config","JSON","parse","require","data","state","graph","buildconfig","selected","bind","componentDidUpdate","getNodeIndex","searchNode","nodes","findIndex","node","getEdgeIndex","searchEdge","edges","edge","source","target","removeEdgeElement","sourcetarget","id","removeElementFromDom","viewWrapper","current","newEdges","filter","e","includes","type","console","log","length","deleteEdgeIds","map","edgeid","consol","r","NodeTypes","shape","typeText","color","fill","EdgeTypes","PotterConfig","NodeSubtypes","render","height","onSelectNode","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    this.state = {\n      graph: data,\n      config: this.buildconfig(config),\n      selected: {}\n    }\n    this.handleCallback = this.handleCallback.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n    // this.onSelectNode = this.onSelectNode.bind(this)\n    // this.onSelectEdge = this.onSelectEdge.bind(this)\n    // this.componentDidMount = this.componentDidMount.bind(this)\n  }\n\n  // Helper to find the index of a given node\n  getNodeIndex(searchNode) {\n    return this.state.graph.nodes.findIndex(node => {\n      return node[NODE_KEY] === searchNode[NODE_KEY];\n    });\n  }\n\n  // Helper to find the index of a given edge\n  getEdgeIndex(searchEdge) {\n    return this.state.graph.edges.findIndex(edge => {\n      return (\n        edge.source === searchEdge.source && edge.target === searchEdge.target\n      );\n    });\n  }\n\n  removeEdgeElement(sourcetarget: string) {\n    const id = `${source}-${target}`;\n\n    GraphUtils.removeElementFromDom(\n      `edge-${id}-container`,\n      this.viewWrapper.current\n    );\n  }\n\n  componentDidUpdate() {\n    if (this.state.newQuery) {\n      // this.setState({ data : {nodes : null, selected : null, edge : null}})\n      this.setState({newQuery : false});\n      \n      var graph = this.state.graph;\n\n      var newEdges = this.state.graph.edges.filter(e => !this.state.query.includes(e.type));\n      console.log(newEdges.length);\n      var deleteEdgeIds = this.state.graph.edges.filter(e => this.state.query.includes(e.type))\n      console.log(deleteEdgeIds.length);\n      deleteEdgeIds.map( edgeid => {\n        // var r = GraphUtils.removeElementFromDom(edgeid)\n\n      \n        console.log(edgeid)\n        consol.log(r)\n      })\n      \n      graph.edges = newEdges;\n\n      // this.setState({ graph : graph})\n      // var nodeIds = newNodes.flatMap((e) => [e.source, e.target]);\n      // var newNodes = data.nodes.filter(n => !nodeIds.includes(n.id));\n      // var deletenodeIds = newNodes.flatMap((e) => [e.source, e.target]);\n      // console.log(deletenodeIds);\n\n      // console.log( newNodes )\n      \n      // deletenodeIds.map( nodeid => {\n      //   GraphUtils.removeElementFromDom(nodeid)\n      //   console.log(nodeid)\n      // })\n\n\n\n      // this.state.data.nodes = newNodes;\n      \n      \n\n    }\n  }\n\n  /* Define custom graph editing metho  ds here */\n  handleCallback = (childData) =>{\n    this.setState({query: childData.query, newQuery : true});\n  }\n\n  buildconfig(config) {\n        \n    var NodeTypes = {}\n\n    config.NodeTypes.map( type => {\n        type.shape =  (\n                <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                    <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                            fill : type.color}} ></circle>\n                </symbol>\n                )\n        NodeTypes[type.typeText] = type\n        \n    })\n    \n    var EdgeTypes = {}\n    \n    config.EdgeTypes.map( type => {\n        type.shape = (\n                <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                    <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                </symbol>\n        )\n        EdgeTypes[type.typeText] = type\n    })\n    \n    var PotterConfig =  {\n        NodeTypes: NodeTypes,\n        NodeSubtypes: {},\n        EdgeTypes: EdgeTypes\n      }\n      \n    return PotterConfig;\n}\n  \n  // onSelectNode = (viewNode) => {\n  //   // Deselect events will send Null viewNode\n  //   this.setState({ selected: viewNode });\n  // }\n\n  // onSelectEdge = (edge) => {\n  //   // Deselect events will send Null viewNode\n  //   this.setState({ selected: edge });\n\n  // }\n\n  render() {\n\n    return (\n      <Container id='graph' style={{height: '1000px'}}>\n        <Row>\n          <Col>\n            <DataBuilder parentCallback = {this.handleCallback} />\n          </Col>\n          <Col>\n            <GraphView  \n              ref='GraphView'\n              nodeKey={NODE_KEY}\n              nodes={this.state.graph.nodes}\n              edges={this.state.graph.edges}\n              selected={this.state.selected}\n              nodeTypes={this.state.config.NodeTypes}\n              nodeSubtypes={this.state.config.NodeSubtypes}\n              edgeTypes={this.state.config.EdgeTypes}\n              onSelectNode={this.onSelectNode}\n              onCreateNode={this.onCreateNode}\n              onUpdateNode={this.onUpdateNode}\n              onDeleteNode={this.onDeleteNode}\n              onSelectEdge={this.onSelectEdge}\n              onCreateEdge={this.onCreateEdge}  \n              onSwapEdge={this.onSwapEdge}\n              onDeleteEdge={this.onDeleteEdge}\n              layoutEngineType={'SnapToGrid'}/>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n\n\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}