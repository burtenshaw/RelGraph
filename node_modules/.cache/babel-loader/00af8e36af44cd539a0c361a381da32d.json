{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph'; // var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.setState({\n        query: childData.query,\n        newQuery: true\n      });\n    };\n\n    this.onSelectNode = viewNode => {\n      // Deselect events will send Null viewNode\n      this.setState({\n        selected: viewNode\n      });\n    };\n\n    this.onSelectEdge = edge => {\n      // Deselect events will send Null viewNode\n      this.setState({\n        selected: edge\n      });\n    };\n\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    this.state = {\n      data: data,\n      config: this.buildconfig(config),\n      selected: {},\n      graph: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: 'no graph'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }, this)\n    };\n    this.handleCallback = this.handleCallback.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n    this.onSelectNode = this.onSelectNode.bind(this);\n    this.onSelectEdge = this.onSelectEdge.bind(this); // this.componentDidMount = this.componentDidMount.bind(this)\n  }\n\n  componentDidUpdate() {\n    if (this.state.newQuery) {\n      var newEdges = this.state.data.edges.map(e => e.type);\n      console.log(newEdges);\n    }\n  }\n  /* Define custom graph editing metho  ds here */\n\n\n  buildconfig(config) {\n    var NodeTypes = {};\n    config.NodeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\",\n          style: {\n            color: '#ffffff',\n            fill: type.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this);\n      NodeTypes[type.typeText] = type;\n    });\n    var EdgeTypes = {};\n    config.EdgeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 200 200\",\n        id: type.typeText,\n        label_from: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"100\",\n          cy: \"100\",\n          r: \"45\",\n          fill: type.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this);\n      EdgeTypes[type.typeText] = type;\n    });\n    var PotterConfig = {\n      NodeTypes: NodeTypes,\n      NodeSubtypes: {},\n      EdgeTypes: EdgeTypes\n    };\n    return PotterConfig;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      id: \"graph\",\n      style: {\n        height: '1000px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(DataBuilder, {\n            parentCallback: this.handleCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(GraphView // ref='GraphView'\n          , {\n            nodeKey: NODE_KEY,\n            nodes: this.state.data.nodes,\n            edges: this.state.data.edges,\n            selected: this.state.selected,\n            nodeTypes: this.state.config.NodeTypes,\n            nodeSubtypes: this.state.config.NodeSubtypes,\n            edgeTypes: this.state.config.EdgeTypes,\n            onSelectNode: this.onSelectNode,\n            onCreateNode: this.onCreateNode,\n            onUpdateNode: this.onUpdateNode,\n            onDeleteNode: this.onDeleteNode,\n            onSelectEdge: this.onSelectEdge,\n            onCreateEdge: this.onCreateEdge,\n            onSwapEdge: this.onSwapEdge,\n            onDeleteEdge: this.onDeleteEdge\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/App.js"],"names":["React","InteractiveForceGraph","ForceGraph","ForceGraphNode","ForceGraphLink","Container","DataBuilder","Col","Row","GraphView","Edge","Node","BwdlTransformer","GraphUtils","NODE_KEY","Graph","Component","constructor","props","handleCallback","childData","setState","query","newQuery","onSelectNode","viewNode","selected","onSelectEdge","edge","config","JSON","parse","require","data","state","buildconfig","graph","bind","componentDidUpdate","newEdges","edges","map","e","type","console","log","NodeTypes","shape","typeText","color","fill","EdgeTypes","PotterConfig","NodeSubtypes","render","height","nodes","onCreateNode","onUpdateNode","onDeleteNode","onCreateEdge","onSwapEdge","onDeleteEdge"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    this.state = {\n      data: data,\n      config: this.buildconfig(config),\n      selected: {},\n      graph: <div>{'no graph'}</div>\n    }\n    this.handleCallback = this.handleCallback.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n    this.onSelectNode = this.onSelectNode.bind(this)\n    this.onSelectEdge = this.onSelectEdge.bind(this)\n    // this.componentDidMount = this.componentDidMount.bind(this)\n  }\n\n  componentDidUpdate() {\n    if (this.state.newQuery) {\n      var newEdges = this.state.data.edges.map(e => e.type)\n      console.log(newEdges)\n    }\n    \n  }\n  /* Define custom graph editing metho  ds here */\n  handleCallback = (childData) =>{\n    this.setState({query: childData.query, newQuery : true});\n  }\n\n  buildconfig(config) {\n        \n    var NodeTypes = {}\n\n    config.NodeTypes.map( type => {\n        type.shape =  (\n                <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                    <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                            fill : type.color}} ></circle>\n                </symbol>\n                )\n        NodeTypes[type.typeText] = type\n        \n    })\n    \n    var EdgeTypes = {}\n    \n    config.EdgeTypes.map( type => {\n        type.shape = (\n                <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                    <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                </symbol>\n        )\n        EdgeTypes[type.typeText] = type\n    })\n    \n    var PotterConfig =  {\n        NodeTypes: NodeTypes,\n        NodeSubtypes: {},\n        EdgeTypes: EdgeTypes\n      }\n      \n    return PotterConfig;\n}\n  \n  onSelectNode = (viewNode) => {\n    // Deselect events will send Null viewNode\n    this.setState({ selected: viewNode });\n  }\n\n  onSelectEdge = (edge) => {\n    // Deselect events will send Null viewNode\n      \n    this.setState({ selected: edge });\n\n  }\n\n  render() {\n\n    return (\n      <Container id='graph' style={{height: '1000px'}}>\n        <Row>\n          <Col>\n          <DataBuilder parentCallback = {this.handleCallback} />\n          </Col>\n          <Col>\n          <GraphView  \n                    // ref='GraphView'\n                    nodeKey={NODE_KEY}\n                    nodes={this.state.data.nodes}\n                    edges={this.state.data.edges}\n                    selected={this.state.selected}\n                    nodeTypes={this.state.config.NodeTypes}\n                    nodeSubtypes={this.state.config.NodeSubtypes}\n                    edgeTypes={this.state.config.EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}  \n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}/>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n\n\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}