{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/Config.js\";\nimport React from 'react';\nimport { Button, ButtonGroup, Container, Dropdown, Form, ListGroup, ListGroupItem } from 'react-bootstrap';\n\nclass DataBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonClick = event => {\n      if (this.state.newQuery) {\n        this.props.parentCallback({\n          data: null,\n          config: null\n        });\n        this.setState({\n          newQuery: false\n        });\n        this.getRelation();\n      }\n\n      this.props.parentCallback({\n        data: this.state.data,\n        config: this.state.config\n      });\n      event.preventDefault();\n    };\n\n    this.handleClusterQuery = e => {\n      this.state.query.push(e);\n      this.setState({\n        newQuery: true\n      });\n    };\n\n    this.onSelectRelation = e => {\n      this.setState({\n        relationview: e.typeText\n      });\n    };\n\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    var relations = this.state = {\n      config: this.buildconfig(config),\n      data: this.builddata(data),\n      query: [],\n      newQuery: null,\n      newData: true,\n      relations: config.EdgeTypes,\n      relationview: 'none'\n    };\n    this.buttonClick = this.buttonClick.bind(this);\n    this.handleClusterQuery = this.handleClusterQuery.bind(this);\n    this.getRelation = this.getRelation.bind(this); // this.doData = this.doData.bind(this);\n    // this.componentDidUpdate = this.componentDidUpdate.bind(this);\n    // this.componentDidMount = this.componentDidUpdate.bind(this);\n  }\n\n  buildconfig(config) {\n    var NodeTypes = {};\n    config.NodeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\",\n          style: {\n            color: '#ffffff',\n            fill: type.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this);\n      NodeTypes[type.typeText] = type;\n    });\n    var EdgeTypes = {};\n    config.EdgeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 200 200\",\n        id: type.typeText,\n        label_from: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"100\",\n          cy: \"100\",\n          r: \"45\",\n          fill: type.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this);\n      EdgeTypes[type.typeText] = type;\n    });\n    var PotterConfig = {\n      NodeTypes: NodeTypes,\n      NodeSubtypes: {},\n      EdgeTypes: EdgeTypes\n    };\n    return PotterConfig;\n  }\n\n  builddata(data) {\n    return data;\n  }\n\n  async getRelation() {\n    const response = await fetch('http://localhost:5001/cluster', {\n      method: 'POST',\n      // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state.query)\n    });\n    const data = await response.json();\n    this.setState({\n      data: this.builddata(data.data),\n      config: this.buildconfig(data.config)\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(ListGroup, {\n        style: {\n          height: \"30em\",\n          overflow: \"scroll\"\n        },\n        children: this.state.relations.map(relation => {\n          return /*#__PURE__*/_jsxDEV(ListGroupItem, {\n            onClick: event => this.onSelectRelation(relation),\n            style: {\n              backgroundColor: relation.color,\n              color: \"white\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                  inline: true,\n                  type: \"checkbox\",\n                  style: {\n                    float: 'right'\n                  },\n                  onClick: event => this.handleClusterQuery(relation.typeText)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: relation.typeText\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          height: '30em',\n          overflow: 'hidden'\n        },\n        children: this.state.relationview\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: e => this.buttonClick(e),\n        children: \" Get Data \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this) // <ButtonGroup>\n    //     <Dropdown>\n    //         <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n    //             Dropdown Button\n    //         </Dropdown.Toggle>\n    //         <Dropdown.Menu >\n    //             <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster0' >cluster0</Dropdown.Item>\n    //             <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster1' >cluster1</Dropdown.Item>\n    //             <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster2' >cluster2</Dropdown.Item>\n    //         </Dropdown.Menu>\n    //     </Dropdown>\n    // </ButtonGroup>\n    ;\n  }\n\n}\n\nexport default DataBuilder;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/Config.js"],"names":["React","Button","ButtonGroup","Container","Dropdown","Form","ListGroup","ListGroupItem","DataBuilder","Component","constructor","props","buttonClick","event","state","newQuery","parentCallback","data","config","setState","getRelation","preventDefault","handleClusterQuery","e","query","push","onSelectRelation","relationview","typeText","JSON","parse","require","relations","buildconfig","builddata","newData","EdgeTypes","bind","NodeTypes","map","type","shape","color","fill","PotterConfig","NodeSubtypes","response","fetch","method","headers","body","stringify","json","render","height","overflow","relation","backgroundColor","float"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, ButtonGroup, Container, Dropdown, Form, ListGroup, ListGroupItem } from 'react-bootstrap';\n\n\nclass DataBuilder extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        var config = JSON.parse(require('./config.json'));\n        var data = JSON.parse(require('./data.json')) ;\n        var relations = \n        this.state = {\n            config : this.buildconfig(config),\n            data : this.builddata(data),\n            query : [],\n            newQuery : null,\n            newData : true,\n            relations : config.EdgeTypes,\n            relationview : 'none'\n        };\n\n        this.buttonClick = this.buttonClick.bind(this);\n        this.handleClusterQuery = this.handleClusterQuery.bind(this);\n        this.getRelation = this.getRelation.bind(this);\n        // this.doData = this.doData.bind(this);\n\n        // this.componentDidUpdate = this.componentDidUpdate.bind(this);\n        // this.componentDidMount = this.componentDidUpdate.bind(this);\n    }\n\n    buildconfig(config) {\n        \n        var NodeTypes = {}\n    \n        config.NodeTypes.map( type => {\n            type.shape =  (\n                    <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                        <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                                fill : type.color}} ></circle>\n                    </symbol>\n                    )\n            NodeTypes[type.typeText] = type\n            \n        })\n        \n        var EdgeTypes = {}\n        \n        config.EdgeTypes.map( type => {\n            type.shape = (\n                    <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                        <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                    </symbol>\n            )\n            EdgeTypes[type.typeText] = type\n        })\n        \n        var PotterConfig =  {\n            NodeTypes: NodeTypes,\n            NodeSubtypes: {},\n            EdgeTypes: EdgeTypes\n          }\n          \n        return PotterConfig;\n    }\n\n    builddata(data) {  \n        return data\n    }\n\n    async getRelation() {\n\n        const response = await fetch('http://localhost:5001/cluster', {\n        method: 'POST', // or 'PUT'\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(this.state.query)\n        })\n\n        const data = await response.json()\n\n        this.setState({\n            data: this.builddata(data.data),\n            config: this.buildconfig(data.config)})\n\n      }\n    \n\n    buttonClick = (event) => {\n\n        if (this.state.newQuery) {\n            this.props.parentCallback({data: null,\n                config: null});\n            this.setState({ newQuery : false });\n            this.getRelation();\n\n        }\n        \n        this.props.parentCallback({data: this.state.data,\n                                    config: this.state.config});\n\n        event.preventDefault();\n    }\n\n    handleClusterQuery = (e) => {\n        this.state.query.push(e);\n        this.setState({ newQuery : true});\n    }\n\n    // componentDidUpdate() {\n\n    // }\n\n    // componentDidMount () {\n    //     // this.doData();\n    // }\n\n    onSelectRelation = (e) => {\n        this.setState({relationview : e.typeText})\n    } \n\n    render () {\n        return (\n\n            <Container>\n                <ListGroup style = {{ height : \"30em\", overflow : \"scroll\"}}>\n                    {this.state.relations.map(relation => {\n                        return (\n                        \n                        <ListGroupItem onClick = {(event) => this.onSelectRelation(relation)} style = {{backgroundColor : relation.color, color : \"white\"}}>\n\n                                <Form.Group>\n                                    <Form.Row>\n                                    <Form.Check inline \n                                                type=\"checkbox\" \n                                                style={{float: 'right'}}\n                                                onClick = {(event) => this.handleClusterQuery(relation.typeText)} />\n                                    \n                                    <Form.Label>\n                                        {relation.typeText}\n                                    </Form.Label>\n                                    </Form.Row>\n                                </Form.Group>\n                                </ListGroupItem>)\n                    })}\n                </ListGroup>\n                <Container style = {{ height : '30em', overflow : 'hidden'}}>\n                    {this.state.relationview}\n                </Container>\n                <Button onClick = {(e) => this.buttonClick(e)}> Get Data </Button>\n            </Container>\n\n            // <ButtonGroup>\n            //     <Dropdown>\n            //         <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            //             Dropdown Button\n            //         </Dropdown.Toggle>\n\n            //         <Dropdown.Menu >\n            //             <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster0' >cluster0</Dropdown.Item>\n            //             <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster1' >cluster1</Dropdown.Item>\n            //             <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster2' >cluster2</Dropdown.Item>\n            //         </Dropdown.Menu>\n            //     </Dropdown>\n                \n            // </ButtonGroup>\n            \n        )}\n}\n\n\nexport default DataBuilder;"]},"metadata":{},"sourceType":"module"}