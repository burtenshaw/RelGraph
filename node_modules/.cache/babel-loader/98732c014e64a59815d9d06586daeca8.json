{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph'; // var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.setState({\n        data: childData.data,\n        config: childData.config\n      });\n    };\n\n    this.state = {\n      graph: null,\n      config: null,\n      selected: {}\n    };\n  }\n  /* Define custom graph editing methods here */\n\n\n  render() {\n    if (this.state.graph) {\n      const nodes = this.state.graph.nodes;\n      const edges = this.state.graph.edges;\n      const selected = this.state.selected;\n      const NodeTypes = this.state.config.NodeTypes;\n      const NodeSubtypes = this.state.config.NodeSubtypes;\n      const EdgeTypes = this.state.config.EdgeTypes;\n      const graph = {\n        /* <GraphView  ref='GraphView'\n        nodeKey={NODE_KEY}\n        nodes={nodes}\n        edges={edges}\n        selected={selected}\n        nodeTypes={NodeTypes}\n        nodeSubtypes={NodeSubtypes}\n        edgeTypes={EdgeTypes}\n        onSelectNode={this.onSelectNode}\n        onCreateNode={this.onCreateNode}\n        onUpdateNode={this.onUpdateNode}\n        onDeleteNode={this.onDeleteNode}\n        onSelectEdge={this.onSelectEdge}\n        onCreateEdge={this.onCreateEdge}\n        onSwapEdge={this.onSwapEdge}\n        onDeleteEdge={this.onDeleteEdge}/> */\n      };\n    }\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      id: \"graph\",\n      style: {\n        height: '1000px'\n      },\n      children: /*#__PURE__*/_jsxDEV(DataBuilder, {\n        parentCallback: this.handleCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/App.js"],"names":["React","InteractiveForceGraph","ForceGraph","ForceGraphNode","ForceGraphLink","Container","DataBuilder","GraphView","Edge","Node","BwdlTransformer","GraphUtils","NODE_KEY","Graph","Component","constructor","props","handleCallback","childData","setState","data","config","state","graph","selected","render","nodes","edges","NodeTypes","NodeSubtypes","EdgeTypes","height"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,qBAAT,EAAgCC,UAAhC,EAA4CC,cAA5C,EAA4DC,cAA5D,QAAiF,iBAAjF;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,UAAxB;AAEA,SACEC,SADF,CACa;AADb,EAEEC,IAFF,CAEQ;AAFR,EAIEC,IAJF,CAIQ;AAJR,EAOEC,eAPF,CAOmB;AAPnB,EAQEC,UARF,CAQa;AARb,OASO,eATP,C,CAWA;;AAEA,MAAMC,QAAQ,GAAG,IAAjB,C,CAA4B;;AAE5B,MAAMC,KAAN,SAAoBb,KAAK,CAACc,SAA1B,CAAoC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAWnBC,cAXmB,GAWDC,SAAD,IAAc;AAC7B,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAEF,SAAS,CAACE,IAAjB;AACAC,QAAAA,MAAM,EAAEH,SAAS,CAACG;AADlB,OAAd;AAED,KAdkB;;AAGjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXF,MAAAA,MAAM,EAAE,IAFG;AAGXG,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKD;AAED;;;AAMAC,EAAAA,MAAM,GAAG;AAEP,QAAG,KAAKH,KAAL,CAAWC,KAAd,EAAqB;AACnB,YAAMG,KAAK,GAAG,KAAKJ,KAAL,CAAWC,KAAX,CAAiBG,KAA/B;AACA,YAAMC,KAAK,GAAG,KAAKL,KAAL,CAAWC,KAAX,CAAiBI,KAA/B;AACA,YAAMH,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AAEA,YAAMI,SAAS,GAAG,KAAKN,KAAL,CAAWD,MAAX,CAAkBO,SAApC;AACA,YAAMC,YAAY,GAAG,KAAKP,KAAL,CAAWD,MAAX,CAAkBQ,YAAvC;AACA,YAAMC,SAAS,GAAG,KAAKR,KAAL,CAAWD,MAAX,CAAkBS,SAApC;AACA,YAAMP,KAAK,GAAW;AAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAf4B,OAAtB;AAgBD;;AACD,wBACE,QAAC,SAAD;AAAW,MAAA,EAAE,EAAC,OAAd;AAAsB,MAAA,KAAK,EAAE;AAACQ,QAAAA,MAAM,EAAE;AAAT,OAA7B;AAAA,6BAII,QAAC,WAAD;AAAa,QAAA,cAAc,EAAI,KAAKd;AAApC;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AArDiC;;AAyDpC,eAAeJ,KAAf","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graph: null,\n      config: null,\n      selected: {}\n    }\n  }\n\n  /* Define custom graph editing methods here */\n  handleCallback = (childData) =>{\n    this.setState({data: childData.data,\n                  config: childData.config})\n  }\n\n  render() {\n\n    if(this.state.graph) {\n      const nodes = this.state.graph.nodes;\n      const edges = this.state.graph.edges;\n      const selected = this.state.selected;\n\n      const NodeTypes = this.state.config.NodeTypes;\n      const NodeSubtypes = this.state.config.NodeSubtypes;\n      const EdgeTypes = this.state.config.EdgeTypes;\n      const graph =         {/* <GraphView  ref='GraphView'\n                    nodeKey={NODE_KEY}\n                    nodes={nodes}\n                    edges={edges}\n                    selected={selected}\n                    nodeTypes={NodeTypes}\n                    nodeSubtypes={NodeSubtypes}\n                    edgeTypes={EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}\n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}/> */}\n    }\n    return (\n      <Container id='graph' style={{height: '1000px'}}>\n\n\n\n          <DataBuilder parentCallback = {this.handleCallback} />\n      </Container>\n    );\n  }\n\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}