{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/Config.js\";\nimport React from 'react';\nimport { Button, ButtonGroup, Dropdown } from 'react-bootstrap';\n\nclass DataBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonClick = event => {\n      if (this.state.newQuery) {\n        this.props.parentCallback({\n          data: null,\n          config: null\n        });\n        this.setState({\n          newQuery: false\n        });\n        this.getRelation();\n      }\n\n      this.props.parentCallback({\n        data: this.state.data,\n        config: this.state.config\n      });\n      event.preventDefault();\n    };\n\n    this.handleClusterQuery = e => {\n      this.state.query.push(e);\n      this.setState({\n        newQuery: true\n      });\n    };\n\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    this.state = {\n      config: this.buildconfig(config),\n      data: this.builddata(data),\n      query: [],\n      newQuery: null,\n      newData: true\n    };\n    this.buttonClick = this.buttonClick.bind(this);\n    this.handleClusterQuery = this.handleClusterQuery.bind(this);\n    this.getRelation = this.getRelation.bind(this); // this.doData = this.doData.bind(this);\n    // this.componentDidUpdate = this.componentDidUpdate.bind(this);\n    // this.componentDidMount = this.componentDidUpdate.bind(this);\n  }\n\n  buildconfig(config) {\n    var NodeTypes = {};\n    config.NodeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\",\n          style: {\n            color: '#ffffff',\n            fill: type.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this);\n      NodeTypes[type.typeText] = type;\n    });\n    var EdgeTypes = {};\n    config.EdgeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 200 200\",\n        id: type.typeText,\n        label_from: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"100\",\n          cy: \"100\",\n          r: \"45\",\n          fill: type.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this);\n      EdgeTypes[type.typeText] = type;\n    });\n    var PotterConfig = {\n      NodeTypes: NodeTypes,\n      NodeSubtypes: {},\n      EdgeTypes: EdgeTypes\n    };\n    return PotterConfig;\n  }\n\n  builddata(data) {\n    return data;\n  }\n\n  async getRelation() {\n    const response = await fetch('http://localhost:5001/cluster', {\n      method: 'POST',\n      // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state.query)\n    }).then(data => {\n      data.json();\n    });\n    this.setState({\n      data: this.builddata(response.data),\n      config: this.buildconfig(response.config)\n    });\n  } // doData(config, data) {\n  //     if (this.state.newData) {\n  //         this.setState({\n  //             config : this.buildconfig(config),\n  //             data : this.builddata(data),\n  //             newData : false\n  //         });\n  //     }\n\n\n  // componentDidUpdate() {\n  // }\n  // componentDidMount () {\n  //     // this.doData();\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"success\",\n          id: \"dropdown-basic\",\n          children: \"Dropdown Button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onSelect: this.handleClusterQuery,\n            eventKey: \"cluster0\",\n            children: \"cluster0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onSelect: this.handleClusterQuery,\n            eventKey: \"cluster1\",\n            children: \"cluster1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onSelect: this.handleClusterQuery,\n            eventKey: \"cluster2\",\n            children: \"cluster2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: e => this.buttonClick(e),\n        children: \" Get Data \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DataBuilder;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/Config.js"],"names":["React","Button","ButtonGroup","Dropdown","DataBuilder","Component","constructor","props","buttonClick","event","state","newQuery","parentCallback","data","config","setState","getRelation","preventDefault","handleClusterQuery","e","query","push","JSON","parse","require","buildconfig","builddata","newData","bind","NodeTypes","map","type","shape","typeText","color","fill","EdgeTypes","PotterConfig","NodeSubtypes","response","fetch","method","headers","body","stringify","then","json","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, ButtonGroup, Dropdown } from 'react-bootstrap';\n\n\nclass DataBuilder extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        var config = JSON.parse(require('./config.json'));\n        var data = JSON.parse(require('./data.json')) \n\n        this.state = {\n            config : this.buildconfig(config),\n            data : this.builddata(data),\n            query : [],\n            newQuery : null,\n            newData : true\n        };\n\n        this.buttonClick = this.buttonClick.bind(this);\n        this.handleClusterQuery = this.handleClusterQuery.bind(this);\n        this.getRelation = this.getRelation.bind(this);\n        // this.doData = this.doData.bind(this);\n\n        // this.componentDidUpdate = this.componentDidUpdate.bind(this);\n        // this.componentDidMount = this.componentDidUpdate.bind(this);\n    }\n\n    buildconfig(config) {\n        \n        var NodeTypes = {}\n    \n        config.NodeTypes.map( type => {\n            type.shape =  (\n                    <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                        <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                                fill : type.color}} ></circle>\n                    </symbol>\n                    )\n            NodeTypes[type.typeText] = type\n            \n        })\n        \n        var EdgeTypes = {}\n        \n        config.EdgeTypes.map( type => {\n            type.shape = (\n                    <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                        <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                    </symbol>\n            )\n            EdgeTypes[type.typeText] = type\n        })\n        \n        var PotterConfig =  {\n            NodeTypes: NodeTypes,\n            NodeSubtypes: {},\n            EdgeTypes: EdgeTypes\n          }\n          \n        return PotterConfig;\n    }\n\n    builddata(data) {  \n        return data\n    }\n\n    async getRelation() {\n\n        const response = await fetch('http://localhost:5001/cluster', {\n        method: 'POST', // or 'PUT'\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(this.state.query)\n        }).then( data => {data.json()})\n\n        this.setState({\n            data: this.builddata(response.data),\n            config: this.buildconfig(response.config)})\n\n      }\n    \n    // doData(config, data) {\n    //     if (this.state.newData) {\n    //         this.setState({\n    //             config : this.buildconfig(config),\n    //             data : this.builddata(data),\n    //             newData : false\n    //         });\n\n    //     }\n        \n    \n\n    buttonClick = (event) => {\n\n        if (this.state.newQuery) {\n            this.props.parentCallback({data: null,\n                config: null});\n            this.setState({ newQuery : false });\n            this.getRelation();\n        }\n        \n        this.props.parentCallback({data: this.state.data,\n                                    config: this.state.config});\n\n        event.preventDefault();\n    }\n\n    handleClusterQuery = (e) => {\n        this.state.query.push(e);\n        this.setState({ newQuery : true});\n    }\n\n    // componentDidUpdate() {\n\n    // }\n\n    // componentDidMount () {\n    //     // this.doData();\n    // }\n\n    render () {\n        return (\n            <ButtonGroup>\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                        Dropdown Button\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu >\n                        <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster0' >cluster0</Dropdown.Item>\n                        <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster1' >cluster1</Dropdown.Item>\n                        <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster2' >cluster2</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n                <Button onClick = {(e) => this.buttonClick(e)}> Get Data </Button>\n            </ButtonGroup>\n            \n        )}\n}\n\n\nexport default DataBuilder;"]},"metadata":{},"sourceType":"module"}