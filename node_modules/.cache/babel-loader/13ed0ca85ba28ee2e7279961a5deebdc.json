{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { unmountComponentAtNode } from 'react-dom';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph';\nimport { Button } from 'react-bootstrap'; // var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.setState({\n        query: childData.query,\n        newQuery: true\n      });\n    };\n\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    this.state = {\n      graph: data,\n      config: this.buildconfig(config),\n      selected: {}\n    };\n    this.handleCallback = this.handleCallback.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this); // this.onSelectPanNode = this.onSelectPanNode.bind(this)\n    // this.onSelectEdge = this.onSelectEdge.bind(this)\n    // this.componentDidMount = this.componentDidMount.bind(this)\n\n    this.GraphView = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.state.newQuery) {\n      // this.setState({ data : {nodes : null, selected : null, edge : null}})\n      this.setState({\n        newQuery: false\n      });\n      var graph = this.state.graph;\n      var newEdges = this.state.graph.edges.filter(e => !this.state.query.includes(e.type));\n      console.log(newEdges.length);\n      var deleteEdgeIds = this.state.graph.edges.filter(e => this.state.query.includes(e.type));\n      console.log(deleteEdgeIds.length);\n      deleteEdgeIds.map(edge => {\n        this.GraphView.deleteEdgeBySourceTarget(edge.source, edge.target);\n      });\n    }\n  }\n  /* Define custom graph editing metho  ds here */\n\n\n  buildconfig(config) {\n    var NodeTypes = {};\n    config.NodeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\",\n          style: {\n            color: '#ffffff',\n            fill: type.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this);\n      NodeTypes[type.typeText] = type;\n    });\n    var EdgeTypes = {};\n    config.EdgeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 200 200\",\n        id: type.typeText,\n        label_from: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"100\",\n          cy: \"100\",\n          r: \"45\",\n          fill: type.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this);\n      EdgeTypes[type.typeText] = type;\n    });\n    var PotterConfig = {\n      NodeTypes: NodeTypes,\n      NodeSubtypes: {},\n      EdgeTypes: EdgeTypes\n    };\n    return PotterConfig;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Jumbotron, {\n      id: \"graph\",\n      ful: true,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(DataBuilder, {\n            ref: this.GraphView,\n            parentCallback: this.handleCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(GraphView, {\n            ref: el => this.GraphView = el,\n            nodeKey: NODE_KEY,\n            nodes: this.state.graph.nodes,\n            edges: this.state.graph.edges,\n            selected: this.state.selected,\n            nodeTypes: this.state.config.NodeTypes,\n            nodeSubtypes: this.state.config.NodeSubtypes,\n            edgeTypes: this.state.config.EdgeTypes,\n            onSelectNode: this.onSelectNode,\n            onCreateNode: this.onCreateNode,\n            onUpdateNode: this.onUpdateNode,\n            onDeleteNode: this.onDeleteNode,\n            onSelectEdge: this.onSelectEdge,\n            onCreateEdge: this.onCreateEdge,\n            onSwapEdge: this.onSwapEdge,\n            onDeleteEdge: this.onDeleteEdge // layoutEngineType={'SnapToGrid'}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/App.js"],"names":["React","unmountComponentAtNode","InteractiveForceGraph","ForceGraph","ForceGraphNode","ForceGraphLink","Container","DataBuilder","Col","Row","GraphView","Edge","Node","BwdlTransformer","GraphUtils","Button","NODE_KEY","Graph","Component","constructor","props","handleCallback","childData","setState","query","newQuery","config","JSON","parse","require","data","state","graph","buildconfig","selected","bind","componentDidUpdate","createRef","newEdges","edges","filter","e","includes","type","console","log","length","deleteEdgeIds","map","edge","deleteEdgeBySourceTarget","source","target","NodeTypes","shape","typeText","color","fill","EdgeTypes","PotterConfig","NodeSubtypes","render","el","nodes","onSelectNode","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport { unmountComponentAtNode } from 'react-dom';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\nimport { Button } from 'react-bootstrap';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    this.state = {\n      graph: data,\n      config: this.buildconfig(config),\n      selected: {}\n    }\n    this.handleCallback = this.handleCallback.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n    // this.onSelectPanNode = this.onSelectPanNode.bind(this)\n    // this.onSelectEdge = this.onSelectEdge.bind(this)\n    // this.componentDidMount = this.componentDidMount.bind(this)\n\n    this.GraphView = React.createRef();\n\n  }\n\n  componentDidUpdate() {\n    if (this.state.newQuery) {\n      // this.setState({ data : {nodes : null, selected : null, edge : null}})\n      this.setState({newQuery : false});\n      \n      var graph = this.state.graph;\n\n      var newEdges = this.state.graph.edges.filter(e => !this.state.query.includes(e.type));\n      console.log(newEdges.length);\n      var deleteEdgeIds = this.state.graph.edges.filter(e => this.state.query.includes(e.type))\n      console.log(deleteEdgeIds.length);\n\n      deleteEdgeIds.map( edge => {\n        this.GraphView.deleteEdgeBySourceTarget(edge.source, edge.target)\n\n      })\n    }\n  }\n\n  /* Define custom graph editing metho  ds here */\n  handleCallback = (childData) =>{\n    this.setState({query: childData.query, newQuery : true});\n\n  }\n\n  buildconfig(config) {\n        \n    var NodeTypes = {}\n\n    config.NodeTypes.map( type => {\n        type.shape =  (\n                <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                    <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                            fill : type.color}} ></circle>\n                </symbol>\n                )\n        NodeTypes[type.typeText] = type\n        \n    })\n    \n    var EdgeTypes = {}\n    \n    config.EdgeTypes.map( type => {\n        type.shape = (\n                <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                    <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                </symbol>\n        )\n        EdgeTypes[type.typeText] = type\n    })\n    \n    var PotterConfig =  {\n        NodeTypes: NodeTypes,\n        NodeSubtypes: {},\n        EdgeTypes: EdgeTypes\n      }\n      \n    return PotterConfig;\n  }\n\n  render() {\n\n    return (\n\n      <Jumbotron id='graph' ful >\n              <Row>\n                <Col md={6}>\n                  <DataBuilder ref={this.GraphView} parentCallback = {this.handleCallback} />\n                </Col>\n                <Col md={6}>\n                  <GraphView  \n                    ref={el => (this.GraphView = el)}\n                    nodeKey={NODE_KEY}\n                    nodes={this.state.graph.nodes}\n                    edges={this.state.graph.edges}\n                    selected={this.state.selected}\n                    nodeTypes={this.state.config.NodeTypes}\n                    nodeSubtypes={this.state.config.NodeSubtypes}\n                    edgeTypes={this.state.config.EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}  \n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}\n                    // layoutEngineType={'SnapToGrid'}\n                    />\n                </Col>\n              </Row>\n      </Jumbotron>\n    );\n  }\n\n}\n\n\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}