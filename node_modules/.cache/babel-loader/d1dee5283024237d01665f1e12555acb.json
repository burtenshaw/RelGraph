{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph';\nvar data = JSON.parse(require('./data.json'));\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.setState({\n        graph: null,\n        data: childData.data,\n        config: childData.config\n      });\n    };\n\n    this.onSelectNode = viewNode => {\n      // Deselect events will send Null viewNode\n      this.setState({\n        selected: viewNode\n      });\n    };\n\n    this.onSelectEdge = edge => {\n      // Deselect events will send Null viewNode\n      this.setState({\n        selected: edge\n      });\n      console.log();\n    };\n\n    this.state = {\n      data: data,\n      config: null,\n      selected: {},\n      graph: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: 'no graph'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }, this)\n    };\n    this.handleCallback = this.handleCallback.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n    this.onSelectNode = this.onSelectNode.bind(this);\n    this.onSelectEdge = this.onSelectEdge.bind(this);\n  }\n  /* Define custom graph editing metho  ds here */\n\n\n  componentDidUpdate() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      id: \"graph\",\n      style: {\n        height: '1000px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(DataBuilder, {\n            parentCallback: this.handleCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(GraphView // ref='GraphView'\n          , {\n            nodeKey: NODE_KEY,\n            nodes: this.state.data.nodes,\n            edges: this.state.data.edges,\n            selected: this.state.selected,\n            nodeTypes: this.state.config.NodeTypes,\n            nodeSubtypes: this.state.config.NodeSubtypes,\n            edgeTypes: this.state.config.EdgeTypes,\n            onSelectNode: this.onSelectNode,\n            onCreateNode: this.onCreateNode,\n            onUpdateNode: this.onUpdateNode,\n            onDeleteNode: this.onDeleteNode,\n            onSelectEdge: this.onSelectEdge,\n            onCreateEdge: this.onCreateEdge,\n            onSwapEdge: this.onSwapEdge,\n            onDeleteEdge: this.onDeleteEdge\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/App.js"],"names":["React","InteractiveForceGraph","ForceGraph","ForceGraphNode","ForceGraphLink","Container","DataBuilder","Col","Row","GraphView","Edge","Node","BwdlTransformer","GraphUtils","data","JSON","parse","require","NODE_KEY","Graph","Component","constructor","props","handleCallback","childData","setState","graph","config","onSelectNode","viewNode","selected","onSelectEdge","edge","console","log","state","bind","componentDidUpdate","render","height","nodes","edges","NodeTypes","NodeSubtypes","EdgeTypes","onCreateNode","onUpdateNode","onDeleteNode","onCreateEdge","onSwapEdge","onDeleteEdge"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\nvar data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: data,\n      config: null,\n      selected: {},\n      graph: <div>{'no graph'}</div>\n    }\n    this.handleCallback = this.handleCallback.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n    this.onSelectNode = this.onSelectNode.bind(this)\n    this.onSelectEdge = this.onSelectEdge.bind(this)\n  }\n\n  /* Define custom graph editing metho  ds here */\n  handleCallback = (childData) =>{\n    this.setState({\n                  graph: null,\n                  data: childData.data,\n                  config: childData.config})\n  }\n\n  componentDidUpdate () {\n    \n  }\n\n  \n  \n  onSelectNode = (viewNode) => {\n    // Deselect events will send Null viewNode\n    this.setState({ selected: viewNode });\n  }\n\n  onSelectEdge = (edge) => {\n    // Deselect events will send Null viewNode\n    \n    \n    this.setState({ selected: edge });\n    \n    console.log()\n  }\n\n  render() {\n\n    return (\n      <Container id='graph' style={{height: '1000px'}}>\n        <Row>\n          <Col>\n          <DataBuilder parentCallback = {this.handleCallback} />\n          </Col>\n          <Col>\n          <GraphView  \n                    // ref='GraphView'\n                    nodeKey={NODE_KEY}\n                    nodes={this.state.data.nodes}\n                    edges={this.state.data.edges}\n                    selected={this.state.selected}\n                    nodeTypes={this.state.config.NodeTypes}\n                    nodeSubtypes={this.state.config.NodeSubtypes}\n                    edgeTypes={this.state.config.EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}  \n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}/>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n\n\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}