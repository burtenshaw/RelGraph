{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph'; // var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.setState({\n        data: childData.data,\n        config: childData.config,\n        ne\n      });\n    };\n\n    this.state = {\n      data: null,\n      config: null,\n      selected: {},\n      graph: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 14\n      }, this)\n    };\n    this.getGraph = this.getGraph.bind(this);\n  }\n  /* Define custom graph editing methods here */\n\n\n  render() {\n    if (this.state.newData) {\n      var nodes = this.state.data.nodes;\n      var edges = this.state.data.edges;\n      var selected = this.state.selected;\n      var NodeTypes = this.state.config.NodeTypes;\n      var NodeSubtypes = this.state.config.NodeSubtypes;\n      var EdgeTypes = this.state.config.EdgeTypes;\n\n      var graph = /*#__PURE__*/_jsxDEV(GraphView, {\n        ref: \"GraphView\",\n        nodeKey: NODE_KEY,\n        nodes: nodes,\n        edges: edges,\n        selected: selected,\n        nodeTypes: NodeTypes,\n        nodeSubtypes: NodeSubtypes,\n        edgeTypes: EdgeTypes,\n        onSelectNode: this.onSelectNode,\n        onCreateNode: this.onCreateNode,\n        onUpdateNode: this.onUpdateNode,\n        onDeleteNode: this.onDeleteNode,\n        onSelectEdge: this.onSelectEdge,\n        onCreateEdge: this.onCreateEdge,\n        onSwapEdge: this.onSwapEdge,\n        onDeleteEdge: this.onDeleteEdge\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }, this);\n\n      this.setState({\n        newData: false\n      });\n    } else {\n      var graph = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      id: \"graph\",\n      style: {\n        height: '1000px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DataBuilder, {\n        parentCallback: this.handleCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), graph]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/App.js"],"names":["React","InteractiveForceGraph","ForceGraph","ForceGraphNode","ForceGraphLink","Container","DataBuilder","GraphView","Edge","Node","BwdlTransformer","GraphUtils","NODE_KEY","Graph","Component","constructor","props","handleCallback","childData","setState","data","config","ne","state","selected","graph","getGraph","bind","render","newData","nodes","edges","NodeTypes","NodeSubtypes","EdgeTypes","onSelectNode","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge","height"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      config: null,\n      selected: {},\n      graph: <div></div>\n    }\n    this.getGraph = this.getGraph.bind(this)\n  }\n\n  /* Define custom graph editing methods here */\n  handleCallback = (childData) =>{\n    this.setState({data: childData.data,\n                  config: childData.config,\n                 ne})\n  }\n\n  render() {\n    if(this.state.newData){\n      var nodes = this.state.data.nodes;\n      var edges = this.state.data.edges;\n      var selected = this.state.selected;\n  \n      var NodeTypes = this.state.config.NodeTypes;\n      var NodeSubtypes = this.state.config.NodeSubtypes;\n      var EdgeTypes = this.state.config.EdgeTypes;\n      var graph = <GraphView  ref='GraphView'\n                    nodeKey={NODE_KEY}\n                    nodes={nodes}\n                    edges={edges}\n                    selected={selected}\n                    nodeTypes={NodeTypes}\n                    nodeSubtypes={NodeSubtypes}\n                    edgeTypes={EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}\n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}/>\n      this.setState({newData:false})\n    } else {\n      var graph = <div></div>\n    }\n    return (\n      <Container id='graph' style={{height: '1000px'}}>\n          \n          <DataBuilder parentCallback = {this.handleCallback} />\n          {graph}\n      </Container>\n    );\n  }\n\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}