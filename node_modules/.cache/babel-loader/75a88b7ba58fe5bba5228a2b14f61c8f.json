{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/Config.js\";\nimport React from 'react';\nimport { Button, ButtonGroup, Dropdown } from 'react-bootstrap';\n\nclass DataBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonClick = event => {\n      if (this.newQuery) {\n        this.getRelation();\n      }\n\n      var packet = {\n        config: this.buildconfig(),\n        data: this.builddata()\n      };\n      this.setState(packet);\n      this.props.parentCallback(packet);\n      event.preventDefault();\n    };\n\n    this.handleClusterQuery = e => {\n      this.state.query.push(e);\n      this.setState({\n        newQuery: true\n      });\n    };\n\n    this.state = {\n      config: this.buildconfig(),\n      data: this.builddata(),\n      query: [],\n      newQuery: null\n    };\n    this.buttonClick = this.buttonClick.bind(this);\n    this.handleClusterQuery = this.handleClusterQuery.bind(this);\n    this.getRelation = this.getRelation.bind(this);\n  }\n\n  buildconfig() {\n    var config = JSON.parse(require('./config.json'));\n    var NodeTypes = {};\n    config.NodeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\",\n          style: {\n            color: '#ffffff',\n            fill: type.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this);\n      NodeTypes[type.typeText] = type;\n    });\n    var EdgeTypes = {};\n    config.EdgeTypes.map(type => {\n      type.shape = /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 200 200\",\n        id: type.typeText,\n        label_from: type.typeText,\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"100\",\n          cy: \"100\",\n          r: \"45\",\n          fill: type.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this);\n      EdgeTypes[type.typeText] = type;\n    });\n    var PotterConfig = {\n      NodeTypes: NodeTypes,\n      NodeSubtypes: {},\n      EdgeTypes: EdgeTypes\n    };\n    return PotterConfig;\n  }\n\n  builddata() {\n    var data = JSON.parse(require('./data.json'));\n    return data;\n  }\n\n  async getRelation() {\n    var relations = this.state.query;\n    const response = await fetch('http://localhost:5001/cluster', {\n      method: 'POST',\n      // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(relations)\n    }).then(data => data.json());\n    this.setState({\n      response: response\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"success\",\n          id: \"dropdown-basic\",\n          children: \"Dropdown Button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onSelect: this.handleClusterQuery,\n            eventKey: \"cluster0\",\n            children: \"cluster0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onSelect: this.handleClusterQuery,\n            eventKey: \"cluster1\",\n            children: \"cluster1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onSelect: this.handleClusterQuery,\n            eventKey: \"cluster2\",\n            children: \"cluster2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.buttonClick,\n        children: \" Get Data \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DataBuilder;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/Config.js"],"names":["React","Button","ButtonGroup","Dropdown","DataBuilder","Component","constructor","props","buttonClick","event","newQuery","getRelation","packet","config","buildconfig","data","builddata","setState","parentCallback","preventDefault","handleClusterQuery","e","state","query","push","bind","JSON","parse","require","NodeTypes","map","type","shape","typeText","color","fill","EdgeTypes","PotterConfig","NodeSubtypes","relations","response","fetch","method","headers","body","stringify","then","json","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, ButtonGroup, Dropdown } from 'react-bootstrap';\n\n\nclass DataBuilder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            config : this.buildconfig(),\n            data : this.builddata(),\n            query : [],\n            newQuery : null\n        };\n\n        this.buttonClick = this.buttonClick.bind(this);\n        this.handleClusterQuery = this.handleClusterQuery.bind(this);\n        this.getRelation = this.getRelation.bind(this);\n    }\n\n    buildconfig() {\n    \n        var config = JSON.parse(require('./config.json'))\n        \n        var NodeTypes = {}\n    \n        config.NodeTypes.map( type => {\n            type.shape =  (\n                    <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                        <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                                fill : type.color}} ></circle>\n                    </symbol>\n                    )\n            NodeTypes[type.typeText] = type\n            \n        })\n        \n        var EdgeTypes = {}\n        \n        config.EdgeTypes.map( type => {\n            type.shape = (\n                    <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                        <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                    </symbol>\n            )\n            EdgeTypes[type.typeText] = type\n        })\n        \n        var PotterConfig =  {\n            NodeTypes: NodeTypes,\n            NodeSubtypes: {},\n            EdgeTypes: EdgeTypes\n          }\n          \n        return PotterConfig;\n    }\n\n    builddata() {\n        var data = JSON.parse(require('./data.json'))   \n        return data\n    }\n\n    async getRelation() {\n\n        var relations = this.state.query\n        const response = await fetch('http://localhost:5001/cluster', {\n        method: 'POST', // or 'PUT'\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(relations)\n        }).then ( data => \n        data.json()\n        );\n\n        this.setState({\n            response:response\n            })\n      }\n\n    buttonClick = (event) => {\n\n        if (this.newQuery) {\n            this.getRelation();\n        }\n        \n        var packet = {\n            config : this.buildconfig(),\n            data : this.builddata()\n        }\n        \n        this.setState(packet);\n        \n        this.props.parentCallback(packet)\n        event.preventDefault();\n    }\n\n    handleClusterQuery = (e) => {\n        this.state.query.push(e);\n        this.setState({ newQuery : true})\n    }\n\n    render(){\n        return (\n            <ButtonGroup>\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                        Dropdown Button\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu >\n                        <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster0' >cluster0</Dropdown.Item>\n                        <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster1' >cluster1</Dropdown.Item>\n                        <Dropdown.Item onSelect = {this.handleClusterQuery} eventKey = 'cluster2' >cluster2</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n                <Button onClick = {this.buttonClick}> Get Data </Button>\n            </ButtonGroup>\n            \n        )}\n}\n\n\nexport default DataBuilder;"]},"metadata":{},"sourceType":"module"}