{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph'; // var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.setState({\n        graph: null,\n        data: childData.data,\n        config: childData.config\n      });\n    };\n\n    this.onSelectNode = viewNode => {\n      // Deselect events will send Null viewNode\n      this.setState({\n        selected: viewNode\n      });\n    };\n\n    this.onSelectEdge = edge => {\n      // Deselect events will send Null viewNode\n      this.setState({\n        selected: edge\n      });\n      console.log();\n    };\n\n    this.state = {\n      data: null,\n      config: null,\n      selected: {},\n      graph: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: 'no graph'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }, this)\n    };\n    this.handleCallback = this.handleCallback.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n    this.onSelectNode = this.onSelectNode.bind(this);\n    this.onSelectEdge = this.onSelectEdge.bind(this);\n  }\n  /* Define custom graph editing metho  ds here */\n\n\n  componentDidUpdate() {\n    if (this.state.data) {\n      var nodes = this.state.data.nodes;\n      var edges = this.state.data.edges;\n      var selected = this.state.selected;\n      var NodeTypes = this.state.config.NodeTypes;\n      var NodeSubtypes = this.state.config.NodeSubtypes;\n      var EdgeTypes = this.state.config.EdgeTypes;\n      var graph = this.setState({\n        data: null,\n        graph: graph\n      });\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      id: \"graph\",\n      style: {\n        height: '1000px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(DataBuilder, {\n            parentCallback: this.handleCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: this.state.graph\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/App.js"],"names":["React","InteractiveForceGraph","ForceGraph","ForceGraphNode","ForceGraphLink","Container","DataBuilder","Col","Row","GraphView","Edge","Node","BwdlTransformer","GraphUtils","NODE_KEY","Graph","Component","constructor","props","handleCallback","childData","setState","graph","data","config","onSelectNode","viewNode","selected","onSelectEdge","edge","console","log","state","bind","componentDidUpdate","nodes","edges","NodeTypes","NodeSubtypes","EdgeTypes","forceUpdate","render","height"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      config: null,\n      selected: {},\n      graph: <div>{'no graph'}</div>\n    }\n    this.handleCallback = this.handleCallback.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n    this.onSelectNode = this.onSelectNode.bind(this)\n    this.onSelectEdge = this.onSelectEdge.bind(this)\n  }\n\n  /* Define custom graph editing metho  ds here */\n  handleCallback = (childData) =>{\n    this.setState({\n                  graph: null,\n                  data: childData.data,\n                  config: childData.config})\n  }\n\n  componentDidUpdate () {\n    if(this.state.data){\n      var nodes = this.state.data.nodes;\n      var edges = this.state.data.edges;\n      var selected = this.state.selected;\n  \n      var NodeTypes = this.state.config.NodeTypes;\n      var NodeSubtypes = this.state.config.NodeSubtypes;\n      var EdgeTypes = this.state.config.EdgeTypes;\n      var graph = \n                    \n      this.setState({data:null,\n                    graph: graph})\n\n      this.forceUpdate();\n    } \n  }\n  \n  onSelectNode = (viewNode) => {\n    // Deselect events will send Null viewNode\n    this.setState({ selected: viewNode });\n  }\n\n  onSelectEdge = (edge) => {\n    // Deselect events will send Null viewNode\n    \n    \n    this.setState({ selected: edge });\n    \n    console.log()\n  }\n\n  render() {\n    return (\n      <Container id='graph' style={{height: '1000px'}}>\n        <Row>\n          <Col>\n          <DataBuilder parentCallback = {this.handleCallback} />\n          </Col>\n          <Col>\n          {this.state.graph}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n\n\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}