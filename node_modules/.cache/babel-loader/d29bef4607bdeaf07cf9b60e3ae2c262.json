{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ben/research/2020/11_november/potter_graph/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { DataBuilder, bui } from './Config';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph'; // var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: DataBuilder.data,\n      config: DataBuilder.config,\n      selected: {}\n    };\n  }\n  /* Define custom graph editing methods here */\n\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n    const NodeTypes = this.state.config.NodeTypes;\n    const NodeSubtypes = this.state.config.NodeSubtypes;\n    const EdgeTypes = this.state.config.EdgeTypes;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      id: \"graph\",\n      style: {\n        height: '1000px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(GraphView, {\n        ref: \"GraphView\",\n        nodeKey: NODE_KEY,\n        nodes: nodes,\n        edges: edges,\n        selected: selected,\n        nodeTypes: NodeTypes,\n        nodeSubtypes: NodeSubtypes,\n        edgeTypes: EdgeTypes,\n        onSelectNode: this.onSelectNode,\n        onCreateNode: this.onCreateNode,\n        onUpdateNode: this.onUpdateNode,\n        onDeleteNode: this.onDeleteNode,\n        onSelectEdge: this.onSelectEdge,\n        onCreateEdge: this.onCreateEdge,\n        onSwapEdge: this.onSwapEdge,\n        onDeleteEdge: this.onDeleteEdge\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DataBuilder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/ben/research/2020/11_november/potter_graph/app/src/App.js"],"names":["React","InteractiveForceGraph","ForceGraph","ForceGraphNode","ForceGraphLink","Container","DataBuilder","bui","GraphView","Edge","Node","BwdlTransformer","GraphUtils","NODE_KEY","Graph","Component","constructor","props","state","graph","data","config","selected","render","nodes","edges","NodeTypes","NodeSubtypes","EdgeTypes","height","onSelectNode","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,qBAAT,EAAgCC,UAAhC,EAA4CC,cAA5C,EAA4DC,cAA5D,QAAiF,iBAAjF;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;AACA,SAAQC,WAAR,EAAqBC,GAArB,QAA+B,UAA/B;AAEA,SACEC,SADF,CACa;AADb,EAEEC,IAFF,CAEQ;AAFR,EAIEC,IAJF,CAIQ;AAJR,EAOEC,eAPF,CAOmB;AAPnB,EAQEC,UARF,CAQa;AARb,OASO,eATP,C,CAWA;;AAEA,MAAMC,QAAQ,GAAG,IAAjB,C,CAA4B;;AAE5B,MAAMC,KAAN,SAAoBd,KAAK,CAACe,SAA1B,CAAoC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEb,WAAW,CAACc,IADR;AAEXC,MAAAA,MAAM,EAAEf,WAAW,CAACe,MAFT;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKD;AAED;;;AAEAC,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG,KAAKN,KAAL,CAAWC,KAAX,CAAiBK,KAA/B;AACA,UAAMC,KAAK,GAAG,KAAKP,KAAL,CAAWC,KAAX,CAAiBM,KAA/B;AACA,UAAMH,QAAQ,GAAG,KAAKJ,KAAL,CAAWI,QAA5B;AAEA,UAAMI,SAAS,GAAG,KAAKR,KAAL,CAAWG,MAAX,CAAkBK,SAApC;AACA,UAAMC,YAAY,GAAG,KAAKT,KAAL,CAAWG,MAAX,CAAkBM,YAAvC;AACA,UAAMC,SAAS,GAAG,KAAKV,KAAL,CAAWG,MAAX,CAAkBO,SAApC;AAEA,wBACE,QAAC,SAAD;AAAW,MAAA,EAAE,EAAC,OAAd;AAAsB,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAA7B;AAAA,8BAEE,QAAC,SAAD;AAAY,QAAA,GAAG,EAAC,WAAhB;AACY,QAAA,OAAO,EAAEhB,QADrB;AAEY,QAAA,KAAK,EAAEW,KAFnB;AAGY,QAAA,KAAK,EAAEC,KAHnB;AAIY,QAAA,QAAQ,EAAEH,QAJtB;AAKY,QAAA,SAAS,EAAEI,SALvB;AAMY,QAAA,YAAY,EAAEC,YAN1B;AAOY,QAAA,SAAS,EAAEC,SAPvB;AAQY,QAAA,YAAY,EAAE,KAAKE,YAR/B;AASY,QAAA,YAAY,EAAE,KAAKC,YAT/B;AAUY,QAAA,YAAY,EAAE,KAAKC,YAV/B;AAWY,QAAA,YAAY,EAAE,KAAKC,YAX/B;AAYY,QAAA,YAAY,EAAE,KAAKC,YAZ/B;AAaY,QAAA,YAAY,EAAE,KAAKC,YAb/B;AAcY,QAAA,UAAU,EAAE,KAAKC,UAd7B;AAeY,QAAA,YAAY,EAAE,KAAKC;AAf/B;AAAA;AAAA;AAAA;AAAA,cAFF,eAmBI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuBD;;AA9CiC;;AAkDpC,eAAevB,KAAf","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {DataBuilder, bui} from './Config';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graph: DataBuilder.data,\n      config: DataBuilder.config,\n      selected: {}\n    }\n  }\n\n  /* Define custom graph editing methods here */\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n\n    const NodeTypes = this.state.config.NodeTypes;\n    const NodeSubtypes = this.state.config.NodeSubtypes;\n    const EdgeTypes = this.state.config.EdgeTypes;\n\n    return (\n      <Container id='graph' style={{height: '1000px'}}>\n\n        <GraphView  ref='GraphView'\n                    nodeKey={NODE_KEY}\n                    nodes={nodes}\n                    edges={edges}\n                    selected={selected}\n                    nodeTypes={NodeTypes}\n                    nodeSubtypes={NodeSubtypes}\n                    edgeTypes={EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}\n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}/>\n\n          <DataBuilder />\n      </Container>\n    );\n  }\n\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}