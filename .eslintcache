[{"/home/ben/research/2020/11_november/potter_graph/app/src/index.js":"1","/home/ben/research/2020/11_november/potter_graph/app/src/Config.js":"2","/home/ben/research/2020/11_november/potter_graph/app/src/App.js":"3","/home/ben/research/2020/11_november/potter_graph/app/src/reportWebVitals.js":"4"},{"size":500,"mtime":1606505290967,"results":"5","hashOfConfig":"6"},{"size":21442,"mtime":1606836771629,"results":"7","hashOfConfig":"6"},{"size":4889,"mtime":1606831821297,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":1606505290967,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cby7cw",{"filePath":"12","messages":"13","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ben/research/2020/11_november/potter_graph/app/src/index.js",[],"/home/ben/research/2020/11_november/potter_graph/app/src/Config.js",["20","21","22","23","24","25","26","27","28","29","30"],"import React from 'react';\nimport { Button, ButtonGroup, Container, Col, Dropdown, InputGroup, FormControl, Form, OverlayTrigger, Popover, Tab, Tabs, Row, Nav } from 'react-bootstrap';\nimport Highlighter from \"react-highlight-words\";\n\n\nconst book_info = {\n    b1: \"Philosopher's Stone\",\n    b2: \"Chamber of Secrets\",\n    b3: \"Prisoner of Azkaban\",\n    b4: \"Goblet of Fire\",\n    b5: \"Order of the Phoenix\",\n    b6: \"Half-Blood Prince\",\n    b7: \"Deathly Hallows\"\n}\n\nclass RelationView extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    // onSelectPanNode = (event) => {\n    //     if (this.GraphView) {\n    //       this.ref.GraphView.panToNode(event.target.value, true);\n    //     }\n    //   };\n\n    render () {\n\n        var relation = this.props.relations;\n\n        return (\n            <div style={{height : '70vh', overflowY:'scroll'}}>\n             <Tabs defaultActiveKey=\"info\" >\n                <Tab eventKey=\"info\" title=\"Relation Info\">\n\n                    <Col>\n                        {/* <Row>\n                            <ButtonGroup>\n                                <Button variant = 'outline-secondary' >source</Button>\n                                <Button variant = 'outline-secondary' >{relation.top_sentence}</Button>\n                                <Button variant = 'outline-secondary' >target</Button>\n                            </ButtonGroup>\n                        </Row> */}\n                        <Row>\n                        <ButtonGroup>\n                                <Button variant = 'outline-secondary' >size</Button>\n                                <Button variant = 'outline-secondary' >{relation.size}</Button>\n                            </ButtonGroup>\n                        </Row>\n                        <Row>\n\n                            {relation.key_words.map(kw => {\n                                        return (<Button variant = 'outline-secondary' style={{margin : '2px'}}>{kw}</Button>)\n                            }\n                                \n                                )}\n                        </Row>\n                    </Col>\n\n                </Tab>\n                <Tab eventKey=\"profile\" title=\"Examples\">\n                    <Col>\n                        {relation.relations.map( r => {\n                            return (\n                                <Row>\n                                    <ButtonGroup className=\"d-flex\">\n                                        <Button variant = 'outline-secondary'>{r.s}</Button>\n\n\n                                        <OverlayTrigger\n                                            trigger=\"click\"\n                                            key='paragraph'\n                                            placement='top'\n                                            overlay={\n                                                <Popover id={`popover-positioned-top`}>\n                                                <Popover.Title as=\"h3\">Book: {book_info[r.bi.book]} Chapter : {r.bi.chapter.slice(1)} Page :{r.bi.page.slice(1)}</Popover.Title>\n                                                <Popover.Content>\n                                                <Highlighter\n                                                        highlightClassName=\"highlighted\"\n                                                        searchWords={[r.rc]}\n                                                        autoEscape={true}\n                                                        textToHighlight={r.p}\n                                                    />\n                                                </Popover.Content>\n                                                </Popover>\n                                            }\n                                            >\n                                            <Button block variant = 'outline-secondary'>{r.rc.slice(0,20)}...</Button>\n                                            </OverlayTrigger>\n                                            \n                                            <Button variant = 'outline-secondary'>{r.t}</Button>\n                                        {/* add overlay */}\n                                    </ButtonGroup>\n                                </Row>\n                            )\n                    })}     \n                    </Col>            \n                </Tab>\n\n                </Tabs>\n                </div>\n\n            \n        )\n    }\n\n\n}\n\nclass AgeView extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render () {\n\n        var age = this.props.age;\n        var age_freq = Object.entries(age.relation_frequency)\n\n        return (\n\n\n                <div style={{height : '70vh', overflowY:'scroll'}}>\n                <Tabs >\n                <Tab eventKey=\"info\" title=\"Relation Info\">\n\n                    <Col>\n                        <Row>\n\n\n                        </Row>\n                        <Row>\n                        <ButtonGroup>\n                                <Button variant = 'outline-secondary' >Frequency</Button>\n                                <Button variant = 'outline-secondary' style={{marginRight : '3px'}} >{age.frequency}</Button>\n                        </ButtonGroup>\n                        <ButtonGroup>\n                                <Button variant = 'outline-secondary' >n Charcters</Button>\n                                <Button variant = 'outline-secondary' >{age.n_characters}</Button>\n                        </ButtonGroup>\n                        </Row>\n                        <Row>\n                            <ButtonGroup>\n                            {age_freq.map(c => {\n                                console.log(c)\n                                var scale = (c[1]/age.frequency)*10\n                                \n                                try {\n                                    var color = this.props.config[c[0]].color\n                                } catch {\n                                    var color = 'white'\n                                }\n                                        return (<Button variant = 'outline-secondary' \n                                                        style={{backgroundColor : color, width: `${scale}%`}}></Button>)\n                            })}\n                            </ButtonGroup>\n\n                        </Row>\n\n                        <Row>\n\n                            {age.characters.map(c => {\n                                        return (<Button variant = 'outline-secondary' style={{margin : '3px'}}>{c}</Button>)\n                            }\n                                \n                                )}\n                        </Row>\n                    </Col>\n\n                </Tab>\n                <Tab eventKey=\"profile\" title=\"Examples\">\n                    <Col>\n                        {age.relations.map( r => {\n                            return (\n                                <Row>\n                                    <ButtonGroup className=\"d-flex\">\n                                        <Button variant = 'outline-secondary'>{r.s}</Button>\n\n\n                                        <OverlayTrigger\n                                            trigger=\"click\"\n                                            key='paragraph'\n                                            placement='top'\n                                            overlay={\n                                                <Popover id={`popover-positioned-top`}>\n                                                <Popover.Title as=\"h3\">book placement</Popover.Title>\n                                                <Popover.Content>\n                                                <Highlighter\n                                                        highlightClassName=\"highlighted\"\n                                                        searchWords={[r.rc]}\n                                                        autoEscape={true}\n                                                        textToHighlight={r.rc}\n                                                    />\n                                                </Popover.Content>\n                                                </Popover>\n                                            }\n                                            >\n                                            <Button block variant = 'outline-secondary'>{r.rc.slice(0,20)}...</Button>\n                                            </OverlayTrigger>\n                                            \n                                            <Button variant = 'outline-secondary'>{r.t}</Button>\n                                        {/* add overlay */}\n                                    </ButtonGroup>\n                                </Row>\n                            )\n                    })}     \n                    </Col>            \n                </Tab>\n                </Tabs>\n                </div>\n            \n        )\n    }\n\n\n}\n\nclass ConnView extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render () {\n\n        var conn = this.props.conn;\n        var frequency = conn.relations.length\n        var conn_freq = Object.entries(conn.relation_frequency)\n\n        return (\n\n\n                <div style={{height : '70vh', overflowY:'scroll'}}>\n                <Tabs >\n                <Tab eventKey=\"info\" title=\"Relation Info\">\n\n                    <Col>\n                        <Row>\n                        <ButtonGroup>\n                                <Button variant = 'outline-secondary' >Frequency</Button>\n                                <Button variant = 'outline-secondary' style={{marginRight : '3px'}} >{frequency}</Button>\n                        </ButtonGroup>\n                        </Row>\n                        <Row>\n                            <ButtonGroup>\n                            {conn_freq.map(c => {\n                                // console.log(c)\n                                var scale = (c[1]/conn.frequency)*10\n                                \n                                try {\n                                    var color = this.props.config[c[0]].color\n                                } catch {\n                                    var color = 'white'\n                                }\n                                        return (<Button variant = 'outline-secondary' \n                                                        style={{backgroundColor : color, width: `${scale}%`}}></Button>)\n                            })}\n                            </ButtonGroup>\n\n                        </Row>\n\n                    </Col>\n\n                </Tab>\n                <Tab eventKey=\"profile\" title=\"Examples\">\n                    <Col>\n                        {conn.relations.map( r => {\n                            return (\n                                <Row>\n                                    <ButtonGroup className=\"d-flex\">\n                                        <Button variant = 'outline-secondary'>{r.s}</Button>\n\n\n                                        <OverlayTrigger\n                                            trigger=\"click\"\n                                            key='paragraph'\n                                            placement='top'\n                                            overlay={\n                                                <Popover id={`popover-positioned-top`}>\n                                                <Popover.Title as=\"h3\">book placement</Popover.Title>\n                                                <Popover.Content>\n                                                <Highlighter\n                                                        highlightClassName=\"highlighted\"\n                                                        searchWords={[r.rc]}\n                                                        autoEscape={true}\n                                                        textToHighlight={r.rc}\n                                                    />\n                                                </Popover.Content>\n                                                </Popover>\n                                            }\n                                            >\n                                            <Button block variant = 'outline-secondary'>{r.rc.slice(0,20)}...</Button>\n                                            </OverlayTrigger>\n                                            \n                                            <Button variant = 'outline-secondary'>{r.t}</Button>\n                                        {/* add overlay */}\n                                    </ButtonGroup>\n                                </Row>\n                            )\n                    })}     \n                    </Col>            \n                </Tab>\n                </Tabs>\n                </div>\n            \n        )\n    }\n\n\n}\n\nclass DataBuilder extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        var config = JSON.parse(require('./config.json'));\n        var data = JSON.parse(require('./data.json'));\n        var relationslist = JSON.parse(require('./relations.json'));\n        var ages = JSON.parse(require('./ages.json'));\n        var conn = JSON.parse(require('./connections.json'));\n        \n        this.state = {\n            config : this.buildconfig(config),\n            data : this.builddata(data),\n            query : [],\n            newQuery : null,\n            newData : true,\n            relations : config.EdgeTypes,\n            relationview : null,\n            relationid : null,\n            relationslist :relationslist,\n            agesResource : ages,\n            connResource : conn\n        };\n\n        this.buttonClick = this.buttonClick.bind(this);\n        this.handleClusterQuery = this.handleClusterQuery.bind(this);\n        this.getRelation = this.getRelation.bind(this);\n        this.onSelectRelation = this.onSelectRelation.bind(this);\n        // this.doData = this.doData.bind(this);\n\n        // this.componentDidUpdate = this.componentDidUpdate.bind(this);\n        // this.componentDidMount = this.componentDidUpdate.bind(this);\n    }\n\n    buildconfig(config) {\n        \n        var NodeTypes = {}\n    \n        config.NodeTypes.map( type => {\n            type.shape =  (\n                    <symbol viewBox=\"0 0 100 100\" id={type.typeText} key=\"0\">\n                        <circle cx=\"50\" cy=\"50\" r=\"45\" style={{ color : '#ffffff' , \n                                                                fill : type.color}} ></circle>\n                    </symbol>\n                    )\n            NodeTypes[type.typeText] = type\n            \n        })\n        \n        var EdgeTypes = {}\n        \n        config.EdgeTypes.map( type => {\n            type.shape = (\n                    <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                        <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                    </symbol>\n            )\n            EdgeTypes[type.typeText] = type\n        })\n        \n        var PotterConfig =  {\n            NodeTypes: NodeTypes,\n            NodeSubtypes: {},\n            EdgeTypes: EdgeTypes\n          }\n          \n        return PotterConfig;\n    }\n\n    builddata(data) { \n        return data\n    }\n\n    async getRelation() {\n\n        const response = await fetch('http://localhost:5000/cluster', {\n        method: 'POST', // or 'PUT'\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(this.state.query)\n        })\n\n        const data = await response.json()\n\n        console.log(data)\n\n        this.setState({\n            data: this.builddata(data.data),\n            config: this.buildconfig(data.config)})\n\n      }\n    \n\n    buttonClick = (event) => {\n\n        if (this.state.newQuery) {\n            // this.props.parentCallback({data: null,\n            //     config: null});\n            // this.setState({ newQuery : false });\n            // this.getRelation();\n        }\n        \n        // this.props.parentCallback({data: this.state.data,\n        //                             config: this.state.config});\n\n        // event.preventDefault();\n    }\n\n\n    handleClusterQuery = (event) => {\n        this.state.query.push(event);\n        this.setState({ newQuery : true});\n        this.props.parentCallback({query: this.state.query});\n        // event.preventDefault();\n    }\n\n\n    onSelectRelation = (e) => {\n        this.setState({relationid : parseInt(e.cluster)})   \n        \n    }\n\n    handleAgeQuery = (event) => {\n        // this.state.query.push(event);\n        // this.setState({ newQuery : true});\n        // this.props.parentCallback({query: this.state.query});\n        // event.preventDefault();\n    }\n\n\n    onSelectAge = (e) => {\n        this.setState({age : e})   \n        \n    }\n\n    onSelectConn = (e) => {\n        this.setState({conn : e})   \n        \n    }\n\n    // componentDidMount () {\n    //     this.props.parentCallback({data: this.state.data,\n    //         config: this.state.config});\n    // }\n\n    render () {\n\n        var relationview = (this.state.relationid) ? <RelationView ref = {this.props.ref} relations = {this.state.relationslist[this.state.relationid]} /> : <div></div>\n        var ageview = (this.state.age) ? <AgeView config = {this.state.config.EdgeTypes} age = {this.state.age} /> : <div></div>\n        var connview = (this.state.conn) ? <ConnView config = {this.state.config.EdgeTypes} conn = {this.state.conn} /> : <div></div>\n        return (\n\n            <Container>\n                <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n                    <Row>\n                        <Nav variant=\"tabs\" className=\"flex-row\">\n                            <Nav.Item>\n                            <Nav.Link eventKey=\"first\">Relations</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                            <Nav.Link eventKey=\"second\">Ages</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                            <Nav.Link eventKey=\"third\">Connections</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Row>\n                    <Row>\n                    <Tab.Content style={{margin : '20px'}}>\n                            <Tab.Pane eventKey=\"first\">\n\n                                <Row>\n                                {this.state.relations.map(relation => {\n                                    return (\n                                            <Button \n                                                variant = 'outline-secondary' \n                                                style = {{backgroundColor : relation.color, width : '100px', color : \"white\", margin: '3px'}} \n                                                onClick = {(event) => this.onSelectRelation(relation)}>{relation.typeText}\n                                            </Button>\n\n                                            )\n                                })}\n                                </Row>\n                                <Row>\n                                <Col>{relationview}</Col>\n                                </Row>\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"second\" >\n                                <Row>\n                                {this.state.agesResource.map(age => {\n                                    return (\n                                        \n                                        <Button variant = 'outline-secondary' \n                                                style={{margin : '3px'}} \n                                                onClick = {(event) => this.onSelectAge(age)}>{age.id}</Button>\n                                        \n                                            )\n                                })}\n                                </Row>\n                                <Row>\n                                <Col>{ageview}</Col>\n                                </Row>\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"third\" >\n                                <Row style={{height : '30vh', overflowY:'scroll'}}>\n                                {this.state.connResource.map(conn => {\n                                    return (\n                                        \n                                        <Button variant = 'outline-secondary' \n                                                style={{margin : '3px'}} \n                                                onClick = {(event) => this.onSelectConn(conn)}>{conn.id}</Button>\n                                        \n                                            )\n                                })}\n                                </Row>\n                                <Row>\n                                    <Col>\n                                {connview}\n                                    </Col>\n                                </Row>\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Row>\n                    </Tab.Container>\n            </Container>\n            \n        )}\n}\n\n\nexport default DataBuilder;","/home/ben/research/2020/11_november/potter_graph/app/src/App.js",["31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48"],"// import logo from './logo.svg';\nimport React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport { unmountComponentAtNode } from 'react-dom';\nimport { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\n\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DataBuilder from './Config';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\nimport { Button } from 'react-bootstrap';\n\n// var data = JSON.parse(require('./data.json'));\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    var config = JSON.parse(require('./config.json'));\n    var data = JSON.parse(require('./data.json'));\n    this.state = {\n      graph: data,\n      config: this.buildconfig(config),\n      selected: {}\n    }\n    this.handleCallback = this.handleCallback.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n    // this.onSelectPanNode = this.onSelectPanNode.bind(this)\n    // this.onSelectEdge = this.onSelectEdge.bind(this)\n    // this.componentDidMount = this.componentDidMount.bind(this)\n\n    this.GraphView = React.createRef();\n\n  }\n\n  componentDidUpdate() {\n    if (this.state.newQuery) {\n      // this.setState({ data : {nodes : null, selected : null, edge : null}})\n      this.setState({newQuery : false});\n      \n      var graph = this.state.graph;\n\n      var newEdges = this.state.graph.edges.filter(e => !this.state.query.includes(e.type));\n      console.log(newEdges.length);\n      var deleteEdgeIds = this.state.graph.edges.filter(e => this.state.query.includes(e.type))\n      console.log(deleteEdgeIds.length);\n\n      deleteEdgeIds.map( edge => {\n        this.GraphView.deleteEdgeBySourceTarget(edge.source, edge.target)\n\n      })\n    }\n  }\n\n  /* Define custom graph editing metho  ds here */\n  handleCallback = (childData) =>{\n    this.setState({query: childData.query, newQuery : true});\n\n  }\n\n  buildconfig(config) {\n        \n    var NodeTypes = {}\n\n    config.NodeTypes.map( type => {\n        type.shape =  (\n                <symbol style={{fontSize:'20px'}} viewBox=\"0 0 300 300\" id={type.typeText} key=\"0\">\n                    <circle cx=\"300\" cy=\"300\" r=\"300\" style={{ color : '#ffffff' ,\n                                                               width : '150px',\n                                                            fill : type.color}} ></circle>\n                </symbol>\n                )\n        NodeTypes[type.typeText] = type\n        \n    })\n    \n    var EdgeTypes = {}\n    \n    config.EdgeTypes.map( type => {\n        type.shape = (\n                <symbol viewBox=\"0 0 200 200\" id={type.typeText} key=\"0\" label_from = {type.typeText}>\n                    <circle cx=\"100\" cy=\"100\" r=\"45\" fill={type.color}></circle>\n                </symbol>\n        )\n        EdgeTypes[type.typeText] = type\n    })\n    \n    var PotterConfig =  {\n        NodeTypes: NodeTypes,\n        NodeSubtypes: {},\n        EdgeTypes: EdgeTypes\n      }\n      \n    return PotterConfig;\n  }\n\n  render() {\n\n    return (\n      <Jumbotron id='graph' fullWidth={true} style={{height:'100vh'}}>\n              <Row style={{height:'100%'}}>\n                <Col md={4}>\n                  <DataBuilder ref={this.GraphView} parentCallback = {this.handleCallback} />\n                </Col>\n                <Col md={8}>\n                  <GraphView  \n                    ref={el => (this.GraphView = el)}\n                    nodeKey={NODE_KEY}\n                    nodes={this.state.graph.nodes}\n                    edges={this.state.graph.edges}\n                    selected={this.state.selected}\n                    nodeTypes={this.state.config.NodeTypes}\n                    nodeSubtypes={this.state.config.NodeSubtypes}\n                    edgeTypes={this.state.config.EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}  \n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}\n                    // layoutEngineType={'SnapToGrid'}\n                    />\n                </Col>\n              </Row>\n      </Jumbotron>\n    );\n  }\n\n}\n\n\n\nexport default Graph;\n","/home/ben/research/2020/11_november/potter_graph/app/src/reportWebVitals.js",[],{"ruleId":"49","severity":1,"message":"50","line":2,"column":47,"nodeType":"51","messageId":"52","endLine":2,"endColumn":55},{"ruleId":"49","severity":1,"message":"53","line":2,"column":57,"nodeType":"51","messageId":"52","endLine":2,"endColumn":67},{"ruleId":"49","severity":1,"message":"54","line":2,"column":69,"nodeType":"51","messageId":"52","endLine":2,"endColumn":80},{"ruleId":"49","severity":1,"message":"55","line":2,"column":82,"nodeType":"51","messageId":"52","endLine":2,"endColumn":86},{"ruleId":"56","severity":1,"message":"57","line":18,"column":5,"nodeType":"58","messageId":"59","endLine":20,"endColumn":6},{"ruleId":"56","severity":1,"message":"57","line":113,"column":5,"nodeType":"58","messageId":"59","endLine":115,"endColumn":6},{"ruleId":"60","severity":1,"message":"61","line":153,"column":41,"nodeType":"51","messageId":"62","endLine":153,"endColumn":46},{"ruleId":"56","severity":1,"message":"57","line":222,"column":5,"nodeType":"58","messageId":"59","endLine":224,"endColumn":6},{"ruleId":"60","severity":1,"message":"61","line":255,"column":41,"nodeType":"51","messageId":"62","endLine":255,"endColumn":46},{"ruleId":"63","severity":1,"message":"64","line":353,"column":36,"nodeType":"65","messageId":"66","endLine":353,"endColumn":38},{"ruleId":"63","severity":1,"message":"64","line":366,"column":36,"nodeType":"65","messageId":"66","endLine":366,"endColumn":38},{"ruleId":"49","severity":1,"message":"67","line":4,"column":10,"nodeType":"51","messageId":"52","endLine":4,"endColumn":32},{"ruleId":"49","severity":1,"message":"68","line":5,"column":10,"nodeType":"51","messageId":"52","endLine":5,"endColumn":31},{"ruleId":"49","severity":1,"message":"69","line":5,"column":33,"nodeType":"51","messageId":"52","endLine":5,"endColumn":43},{"ruleId":"49","severity":1,"message":"70","line":5,"column":45,"nodeType":"51","messageId":"52","endLine":5,"endColumn":59},{"ruleId":"49","severity":1,"message":"71","line":5,"column":61,"nodeType":"51","messageId":"52","endLine":5,"endColumn":75},{"ruleId":"49","severity":1,"message":"72","line":7,"column":8,"nodeType":"51","messageId":"52","endLine":7,"endColumn":17},{"ruleId":"49","severity":1,"message":"73","line":16,"column":3,"nodeType":"51","messageId":"52","endLine":16,"endColumn":7},{"ruleId":"49","severity":1,"message":"74","line":17,"column":8,"nodeType":"51","messageId":"52","endLine":17,"endColumn":13},{"ruleId":"49","severity":1,"message":"75","line":18,"column":3,"nodeType":"51","messageId":"52","endLine":18,"endColumn":7},{"ruleId":"49","severity":1,"message":"76","line":19,"column":8,"nodeType":"51","messageId":"52","endLine":19,"endColumn":13},{"ruleId":"49","severity":1,"message":"77","line":20,"column":8,"nodeType":"51","messageId":"52","endLine":20,"endColumn":24},{"ruleId":"49","severity":1,"message":"78","line":21,"column":3,"nodeType":"51","messageId":"52","endLine":21,"endColumn":18},{"ruleId":"49","severity":1,"message":"79","line":22,"column":3,"nodeType":"51","messageId":"52","endLine":22,"endColumn":13},{"ruleId":"49","severity":1,"message":"80","line":24,"column":10,"nodeType":"51","messageId":"52","endLine":24,"endColumn":16},{"ruleId":"49","severity":1,"message":"81","line":56,"column":11,"nodeType":"51","messageId":"52","endLine":56,"endColumn":16},{"ruleId":"63","severity":1,"message":"64","line":63,"column":31,"nodeType":"65","messageId":"66","endLine":63,"endColumn":33},{"ruleId":"63","severity":1,"message":"64","line":80,"column":32,"nodeType":"65","messageId":"66","endLine":80,"endColumn":34},{"ruleId":"63","severity":1,"message":"64","line":94,"column":32,"nodeType":"65","messageId":"66","endLine":94,"endColumn":34},"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'Form' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-redeclare","'color' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'unmountComponentAtNode' is defined but never used.","'InteractiveForceGraph' is defined but never used.","'ForceGraph' is defined but never used.","'ForceGraphNode' is defined but never used.","'ForceGraphLink' is defined but never used.","'Container' is defined but never used.","'Edge' is defined but never used.","'IEdge' is defined but never used.","'Node' is defined but never used.","'INode' is defined but never used.","'LayoutEngineType' is defined but never used.","'BwdlTransformer' is defined but never used.","'GraphUtils' is defined but never used.","'Button' is defined but never used.","'graph' is assigned a value but never used."]