{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/burtenshaw/research/2020/11_november/potter_kg/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react'; // import { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\n\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph';\nvar data = JSON.parse(require('./data.json'));\nvar config = JSON.parse(require('./config.json')); // const GraphConfig =  {\n//   NodeTypes: {\n//     empty: { // required to show empty nodes\n//       typeText: \"None\",\n//       shapeId: \"#empty\", // relates to the type property of a node\n//       shape: (\n//         <symbol viewBox=\"0 0 100 100\" id=\"empty\" key=\"0\">\n//           <circle cx=\"50\" cy=\"50\" r=\"45\"></circle>\n//         </symbol>\n//       )\n//     },\n//     custom: { // required to show empty nodes\n//       typeText: \"Custom\",\n//       shapeId: \"#custom\", // relates to the type property of a node\n//       shape: (\n//         <symbol viewBox=\"0 0 50 25\" id=\"custom\" key=\"0\">\n//           <ellipse cx=\"50\" cy=\"25\" rx=\"50\" ry=\"25\"></ellipse>\n//         </symbol>\n//       )\n//     }\n//   },\n//   NodeSubtypes: {},\n//   EdgeTypes: {\n//     emptyEdge: {  // required to show empty edges\n//       shapeId: \"#emptyEdge\",\n//       shape: (\n//         <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\" key=\"0\">\n//           <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\"> </circle>\n//         </symbol>\n//       )\n//     }\n//   }\n// }\n\nconst GraphConfig = config;\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: data,\n      selected: {}\n    };\n  }\n  /* Define custom graph editing methods here */\n\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"graph\",\n      style: styles.graph,\n      children: /*#__PURE__*/_jsxDEV(GraphView, {\n        ref: \"GraphView\",\n        nodeKey: NODE_KEY,\n        nodes: nodes,\n        edges: edges,\n        selected: selected,\n        nodeTypes: NodeTypes,\n        nodeSubtypes: NodeSubtypes,\n        edgeTypes: EdgeTypes,\n        onSelectNode: this.onSelectNode,\n        onCreateNode: this.onCreateNode,\n        onUpdateNode: this.onUpdateNode,\n        onDeleteNode: this.onDeleteNode,\n        onSelectEdge: this.onSelectEdge,\n        onCreateEdge: this.onCreateEdge,\n        onSwapEdge: this.onSwapEdge,\n        onDeleteEdge: this.onDeleteEdge\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/burtenshaw/research/2020/11_november/potter_kg/app/src/App.js"],"names":["React","Container","GraphView","Edge","Node","BwdlTransformer","GraphUtils","data","JSON","parse","require","config","GraphConfig","NODE_KEY","App","Component","constructor","props","state","graph","selected","render","nodes","edges","NodeTypes","NodeSubtypes","EdgeTypes","styles","onSelectNode","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;AAEA,SACEC,SADF,CACa;AADb,EAEEC,IAFF,CAEQ;AAFR,EAIEC,IAJF,CAIQ;AAJR,EAOEC,eAPF,CAOmB;AAPnB,EAQEC,UARF,CAQa;AARb,OASO,eATP;AAYA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,OAAO,CAAC,aAAD,CAAlB,CAAX;AACA,IAAIC,MAAM,GAAGH,IAAI,CAACC,KAAL,CAAWC,OAAO,CAAC,eAAD,CAAlB,CAAb,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,WAAW,GAAGD,MAApB;AAEA,MAAME,QAAQ,GAAG,IAAjB,C,CAA4B;;AAE5B,MAAMC,GAAN,SAAkBC,SAAlB,CAA4B;AAE1BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEZ,IADI;AAEXa,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;AAED;;;AAEAC,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG,KAAKJ,KAAL,CAAWC,KAAX,CAAiBG,KAA/B;AACA,UAAMC,KAAK,GAAG,KAAKL,KAAL,CAAWC,KAAX,CAAiBI,KAA/B;AACA,UAAMH,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AAEA,UAAMI,SAAS,GAAGZ,WAAW,CAACY,SAA9B;AACA,UAAMC,YAAY,GAAGb,WAAW,CAACa,YAAjC;AACA,UAAMC,SAAS,GAAGd,WAAW,CAACc,SAA9B;AAEA,wBACE;AAAK,MAAA,EAAE,EAAC,OAAR;AAAgB,MAAA,KAAK,EAAEC,MAAM,CAACR,KAA9B;AAAA,6BAEE,QAAC,SAAD;AAAY,QAAA,GAAG,EAAC,WAAhB;AACY,QAAA,OAAO,EAAEN,QADrB;AAEY,QAAA,KAAK,EAAES,KAFnB;AAGY,QAAA,KAAK,EAAEC,KAHnB;AAIY,QAAA,QAAQ,EAAEH,QAJtB;AAKY,QAAA,SAAS,EAAEI,SALvB;AAMY,QAAA,YAAY,EAAEC,YAN1B;AAOY,QAAA,SAAS,EAAEC,SAPvB;AAQY,QAAA,YAAY,EAAE,KAAKE,YAR/B;AASY,QAAA,YAAY,EAAE,KAAKC,YAT/B;AAUY,QAAA,YAAY,EAAE,KAAKC,YAV/B;AAWY,QAAA,YAAY,EAAE,KAAKC,YAX/B;AAYY,QAAA,YAAY,EAAE,KAAKC,YAZ/B;AAaY,QAAA,YAAY,EAAE,KAAKC,YAb/B;AAcY,QAAA,UAAU,EAAE,KAAKC,UAd7B;AAeY,QAAA,YAAY,EAAE,KAAKC;AAf/B;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD;;AA3CyB;;AA+C5B,eAAerB,GAAf","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\n// import { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\n\nvar data = JSON.parse(require('./data.json'));\nvar config = JSON.parse(require('./config.json'));\n\n\n\n// const GraphConfig =  {\n//   NodeTypes: {\n//     empty: { // required to show empty nodes\n//       typeText: \"None\",\n//       shapeId: \"#empty\", // relates to the type property of a node\n//       shape: (\n//         <symbol viewBox=\"0 0 100 100\" id=\"empty\" key=\"0\">\n//           <circle cx=\"50\" cy=\"50\" r=\"45\"></circle>\n//         </symbol>\n//       )\n//     },\n//     custom: { // required to show empty nodes\n//       typeText: \"Custom\",\n//       shapeId: \"#custom\", // relates to the type property of a node\n//       shape: (\n//         <symbol viewBox=\"0 0 50 25\" id=\"custom\" key=\"0\">\n//           <ellipse cx=\"50\" cy=\"25\" rx=\"50\" ry=\"25\"></ellipse>\n//         </symbol>\n//       )\n//     }\n//   },\n//   NodeSubtypes: {},\n//   EdgeTypes: {\n//     emptyEdge: {  // required to show empty edges\n//       shapeId: \"#emptyEdge\",\n//       shape: (\n//         <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\" key=\"0\">\n//           <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\"> </circle>\n//         </symbol>\n//       )\n//     }\n//   }\n// }\n\nconst GraphConfig = config;\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graph: data,\n      selected: {}\n    }\n  }\n\n  /* Define custom graph editing methods here */\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n\n    return (\n      <div id='graph' style={styles.graph}>\n\n        <GraphView  ref='GraphView'\n                    nodeKey={NODE_KEY}\n                    nodes={nodes}\n                    edges={edges}\n                    selected={selected}\n                    nodeTypes={NodeTypes}\n                    nodeSubtypes={NodeSubtypes}\n                    edgeTypes={EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}\n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}/>\n      </div>\n    );\n  }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}