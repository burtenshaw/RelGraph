{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/burtenshaw/research/2020/11_november/potter_kg/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nvar data = JSON.parse(require('./data.json'));\n\nvar config = require('./config.json');\n\nconsole.log(data);\nconsole.log(config);\nconst GraphConfig = config;\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: data,\n      selected: {},\n      config: config\n    };\n  }\n  /* Define custom graph editing methods here */\n\n\n  doEdges() {\n    const config = this.state.config;\n  }\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n    return /*#__PURE__*/_jsxDEV(ForceGraph, {\n      simulationOptions: {\n        height: 300,\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(ForceGraphNode, {\n        node: {\n          id: 'first-node'\n        },\n        fill: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForceGraphNode, {\n        node: {\n          id: 'second-node'\n        },\n        fill: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForceGraphLink, {\n        link: {\n          source: 'first-node',\n          target: 'second-node'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/burtenshaw/research/2020/11_november/potter_kg/app/src/App.js"],"names":["React","ForceGraph","ForceGraphNode","ForceGraphLink","Container","data","JSON","parse","require","config","console","log","GraphConfig","NODE_KEY","Graph","Component","constructor","props","state","graph","selected","doEdges","render","nodes","edges","NodeTypes","NodeSubtypes","EdgeTypes","height","width","id","source","target"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,EAAoBC,cAApB,EAAoCC,cAApC,QAAyD,iBAAzD;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;AAGA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,OAAO,CAAC,aAAD,CAAlB,CAAX;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;;AAEAE,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAK,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEA,MAAMG,WAAW,GAAGH,MAApB;AAEA,MAAMI,QAAQ,GAAG,IAAjB,C,CAA4B;;AAE5B,MAAMC,KAAN,SAAoBd,KAAK,CAACe,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEd,IADI;AAEXe,MAAAA,QAAQ,EAAE,EAFC;AAGXX,MAAAA,MAAM,EAAEA;AAHG,KAAb;AAKD;AAED;;;AAEAY,EAAAA,OAAO,GAAI;AACT,UAAMZ,MAAM,GAAG,KAAKS,KAAL,CAAWT,MAA1B;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG,KAAKL,KAAL,CAAWC,KAAX,CAAiBI,KAA/B;AACA,UAAMC,KAAK,GAAG,KAAKN,KAAL,CAAWC,KAAX,CAAiBK,KAA/B;AACA,UAAMJ,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AAEA,UAAMK,SAAS,GAAGb,WAAW,CAACa,SAA9B;AACA,UAAMC,YAAY,GAAGd,WAAW,CAACc,YAAjC;AACA,UAAMC,SAAS,GAAGf,WAAW,CAACe,SAA9B;AAEA,wBACE,QAAC,UAAD;AAAY,MAAA,iBAAiB,EAAE;AAAEC,QAAAA,MAAM,EAAE,GAAV;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAA/B;AAAA,8BACE,QAAC,cAAD;AAAgB,QAAA,IAAI,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAtB;AAA4C,QAAA,IAAI,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,cAAD;AAAgB,QAAA,IAAI,EAAE;AAAEA,UAAAA,EAAE,EAAE;AAAN,SAAtB;AAA6C,QAAA,IAAI,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,cAAD;AAAgB,QAAA,IAAI,EAAE;AAAEC,UAAAA,MAAM,EAAE,YAAV;AAAwBC,UAAAA,MAAM,EAAE;AAAhC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAjCiC;;AAqCpC,eAAelB,KAAf","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nvar data = JSON.parse(require('./data.json'));\nvar config = require('./config.json');\n\nconsole.log(data)\nconsole.log(config)\n\nconst GraphConfig = config\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graph: data,\n      selected: {},\n      config: config\n    }\n  }\n\n  /* Define custom graph editing methods here */\n\n  doEdges () {\n    const config = this.state.config\n  }  \n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n\n    return (\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        <ForceGraphNode node={{ id: 'first-node' }} fill=\"red\" />\n        <ForceGraphNode node={{ id: 'second-node' }} fill=\"blue\" />\n        <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      </ForceGraph>\n    );\n  }\n\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}