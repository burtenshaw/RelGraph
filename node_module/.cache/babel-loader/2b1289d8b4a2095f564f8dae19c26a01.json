{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/burtenshaw/research/2020/11_november/potter_kg/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nvar data = JSON.parse(require('./data.json'));\n\nvar config = require('./config.json');\n\nconsole.log(data);\nconsole.log(config);\nconst GraphConfig = config;\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: data,\n      selected: {},\n      config: config\n    };\n    this.doEdges = this.doEdges.bind(this);\n    this.doNodes = this.doNodes.bind(this);\n  }\n  /* Define custom graph editing methods here */\n\n\n  doNodes() {\n    const config = this.state.config;\n    const nodes = this.state.graph.nodes;\n    return nodes.map(node => {\n      /*#__PURE__*/\n      _jsxDEV(ForceGraphNode, {\n        node: {\n          id: node.id\n        },\n        fill: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this);\n    });\n  }\n\n  doEdges() {\n    const config = this.state.config;\n    const edges = this.state.graph.edges;\n    return edges.map(edge => {\n      /*#__PURE__*/\n      _jsxDEV(ForceGraphLink, {\n        link: {\n          source: edge.source,\n          target: edge.target\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n    return /*#__PURE__*/_jsxDEV(ForceGraph, {\n      simulationOptions: {\n        height: 300,\n        width: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(ForceGraphNode, {\n        node: {\n          id: 'second-node'\n        },\n        fill: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForceGraphLink, {\n        link: {\n          source: 'first-node',\n          target: 'second-node'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/burtenshaw/research/2020/11_november/potter_kg/app/src/App.js"],"names":["React","ForceGraph","ForceGraphNode","ForceGraphLink","Container","data","JSON","parse","require","config","console","log","GraphConfig","NODE_KEY","Graph","Component","constructor","props","state","graph","selected","doEdges","bind","doNodes","nodes","map","node","id","edges","edge","source","target","render","NodeTypes","NodeSubtypes","EdgeTypes","height","width"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport {ForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nvar data = JSON.parse(require('./data.json'));\nvar config = require('./config.json');\n\nconsole.log(data)\nconsole.log(config)\n\nconst GraphConfig = config\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graph: data,\n      selected: {},\n      config: config\n    }\n    this.doEdges = this.doEdges.bind(this);\n    this.doNodes = this.doNodes.bind(this);\n  }\n\n  /* Define custom graph editing methods here */\n  doNodes () {\n    const config = this.state.config;\n    const nodes = this.state.graph.nodes;\n    return nodes.map(node => {\n      <ForceGraphNode node={{ id: node.id }} fill=\"red\" />\n    })\n  }\n\n  doEdges () {\n    const config = this.state.config;\n    const edges = this.state.graph.edges;\n\n    return (\n      edges.map(edge => {\n        <ForceGraphLink link={{ source: edge.source, target: edge.target }} />\n      })\n    )\n\n  }  \n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n\n    return (\n      <ForceGraph simulationOptions={{ height: 300, width: 300 }}>\n        \n        <ForceGraphNode node={{ id: 'second-node' }} fill=\"blue\" />\n        <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n      </ForceGraph>\n    );\n  }\n\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}