{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/burtenshaw/research/2020/11_november/potter_kg/app/src/Config.js\";\nvar config = JSON.parse(require('./config.json')); // const PotterConfig = config.map();\n\nvar node_types = config.NodeTypes;\nvar EdgeTypes = config.EdgeTypes;\nconst GraphConfig = {\n  NodeTypes: {\n    empty: {\n      // required to show empty nodes\n      typeText: \"None\",\n      shapeId: \"#empty\",\n      // relates to the type property of a node\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: \"empty\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this)\n    },\n    custom: {\n      // required to show empty nodes\n      typeText: \"Custom\",\n      shapeId: \"#custom\",\n      // relates to the type property of a node\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 50 25\",\n        id: \"custom\",\n        children: /*#__PURE__*/_jsxDEV(\"ellipse\", {\n          cx: \"50\",\n          cy: \"25\",\n          rx: \"50\",\n          ry: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)\n    }\n  },\n  NodeSubtypes: {},\n  EdgeTypes: {\n    emptyEdge: {\n      // required to show empty edges\n      shapeId: \"#emptyEdge\",\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 50 50\",\n        id: \"emptyEdge\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"25\",\n          cy: \"25\",\n          r: \"8\",\n          fill: \"currentColor\",\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }\n  }\n};\nexport default PotterConfig;","map":{"version":3,"sources":["/home/burtenshaw/research/2020/11_november/potter_kg/app/src/Config.js"],"names":["config","JSON","parse","require","node_types","NodeTypes","EdgeTypes","GraphConfig","empty","typeText","shapeId","shape","custom","NodeSubtypes","emptyEdge","PotterConfig"],"mappings":";;AACA,IAAIA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWC,OAAO,CAAC,eAAD,CAAlB,CAAb,C,CAEA;;AAGA,IAAIC,UAAU,GAAGJ,MAAM,CAACK,SAAxB;AAEA,IAAIC,SAAS,GAAGN,MAAM,CAACM,SAAvB;AAEA,MAAMC,WAAW,GAAI;AACjBF,EAAAA,SAAS,EAAE;AACTG,IAAAA,KAAK,EAAE;AAAE;AACPC,MAAAA,QAAQ,EAAE,MADL;AAELC,MAAAA,OAAO,EAAE,QAFJ;AAEc;AACnBC,MAAAA,KAAK,eACH;AAAQ,QAAA,OAAO,EAAC,aAAhB;AAA8B,QAAA,EAAE,EAAC,OAAjC;AAAA,+BACE;AAAQ,UAAA,EAAE,EAAC,IAAX;AAAgB,UAAA,EAAE,EAAC,IAAnB;AAAwB,UAAA,CAAC,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF,SAA6C,GAA7C;AAAA;AAAA;AAAA;AAAA;AAJG,KADE;AAUTC,IAAAA,MAAM,EAAE;AAAE;AACRH,MAAAA,QAAQ,EAAE,QADJ;AAENC,MAAAA,OAAO,EAAE,SAFH;AAEc;AACpBC,MAAAA,KAAK,eACH;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,EAAE,EAAC,QAA/B;AAAA,+BACE;AAAS,UAAA,EAAE,EAAC,IAAZ;AAAiB,UAAA,EAAE,EAAC,IAApB;AAAyB,UAAA,EAAE,EAAC,IAA5B;AAAiC,UAAA,EAAE,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA;AADF,SAA4C,GAA5C;AAAA;AAAA;AAAA;AAAA;AAJI;AAVC,GADM;AAqBjBE,EAAAA,YAAY,EAAE,EArBG;AAsBjBP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,SAAS,EAAE;AAAG;AACZJ,MAAAA,OAAO,EAAE,YADA;AAETC,MAAAA,KAAK,eACH;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,EAAE,EAAC,WAA/B;AAAA,+BACE;AAAQ,UAAA,EAAE,EAAC,IAAX;AAAgB,UAAA,EAAE,EAAC,IAAnB;AAAwB,UAAA,CAAC,EAAC,GAA1B;AAA8B,UAAA,IAAI,EAAC,cAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAA+C,GAA/C;AAAA;AAAA;AAAA;AAAA;AAHO;AADF;AAtBM,CAArB;AAmCE,eAAeI,YAAf","sourcesContent":["\nvar config = JSON.parse(require('./config.json'));\n\n// const PotterConfig = config.map();\n\n\nvar node_types = config.NodeTypes\n\nvar EdgeTypes = config.EdgeTypes\n\nconst GraphConfig =  {\n    NodeTypes: {\n      empty: { // required to show empty nodes\n        typeText: \"None\",\n        shapeId: \"#empty\", // relates to the type property of a node\n        shape: (\n          <symbol viewBox=\"0 0 100 100\" id=\"empty\" key=\"0\">\n            <circle cx=\"50\" cy=\"50\" r=\"45\"></circle>\n          </symbol>\n        )\n      },\n      custom: { // required to show empty nodes\n        typeText: \"Custom\",\n        shapeId: \"#custom\", // relates to the type property of a node\n        shape: (\n          <symbol viewBox=\"0 0 50 25\" id=\"custom\" key=\"0\">\n            <ellipse cx=\"50\" cy=\"25\" rx=\"50\" ry=\"25\"></ellipse>\n          </symbol>\n        )\n      }\n    },\n    NodeSubtypes: {},\n    EdgeTypes: {\n      emptyEdge: {  // required to show empty edges\n        shapeId: \"#emptyEdge\",\n        shape: (\n          <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\" key=\"0\">\n            <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\"> </circle>\n          </symbol>\n        )\n      }\n    }\n  }\n\n\n  export default PotterConfig;\n"]},"metadata":{},"sourceType":"module"}