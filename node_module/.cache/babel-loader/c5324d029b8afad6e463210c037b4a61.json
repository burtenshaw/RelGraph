{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/burtenshaw/research/2020/11_november/potter_kg/app/src/App.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport { GraphView // required\n, Edge // optional\n, Node // optional\n, BwdlTransformer // optional, Example JSON transformer\n, GraphUtils // optional, useful utility functions\n} from 'react-digraph';\nimport Container from 'react-bootstrap/Cont';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport sample from './sample.json';\nconst GraphConfig = {\n  NodeTypes: {\n    empty: {\n      // required to show empty nodes\n      typeText: \"None\",\n      shapeId: \"#empty\",\n      // relates to the type property of a node\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: \"empty\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    },\n    custom: {\n      // required to show empty nodes\n      typeText: \"Custom\",\n      shapeId: \"#custom\",\n      // relates to the type property of a node\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 50 25\",\n        id: \"custom\",\n        children: /*#__PURE__*/_jsxDEV(\"ellipse\", {\n          cx: \"50\",\n          cy: \"25\",\n          rx: \"50\",\n          ry: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }\n  },\n  NodeSubtypes: {},\n  EdgeTypes: {\n    emptyEdge: {\n      // required to show empty edges\n      shapeId: \"#emptyEdge\",\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 50 50\",\n        id: \"emptyEdge\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"25\",\n          cy: \"25\",\n          r: \"8\",\n          fill: \"currentColor\",\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }\n  }\n};\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: sample,\n      selected: {}\n    };\n  }\n  /* Define custom graph editing methods here */\n\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"graph\",\n        children: /*#__PURE__*/_jsxDEV(GraphView, {\n          ref: \"GraphView\",\n          nodeKey: NODE_KEY,\n          nodes: nodes,\n          edges: edges,\n          selected: selected,\n          nodeTypes: NodeTypes,\n          nodeSubtypes: NodeSubtypes,\n          edgeTypes: EdgeTypes,\n          onSelectNode: this.onSelectNode,\n          onCreateNode: this.onCreateNode,\n          onUpdateNode: this.onUpdateNode,\n          onDeleteNode: this.onDeleteNode,\n          onSelectEdge: this.onSelectEdge,\n          onCreateEdge: this.onCreateEdge,\n          onSwapEdge: this.onSwapEdge,\n          onDeleteEdge: this.onDeleteEdge\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/burtenshaw/research/2020/11_november/potter_kg/app/src/App.js"],"names":["React","GraphView","Edge","Node","BwdlTransformer","GraphUtils","Container","sample","GraphConfig","NodeTypes","empty","typeText","shapeId","shape","custom","NodeSubtypes","EdgeTypes","emptyEdge","NODE_KEY","Graph","Component","constructor","props","state","graph","selected","render","nodes","edges","onSelectNode","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport {\n  GraphView, // required\n  Edge, // optional\n  type IEdge, // optional\n  Node, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n  BwdlTransformer, // optional, Example JSON transformer\n  GraphUtils // optional, useful utility functions\n} from 'react-digraph';\n\nimport Container from 'react-bootstrap/Cont';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport sample from './sample.json';\n\nconst GraphConfig =  {\n  NodeTypes: {\n    empty: { // required to show empty nodes\n      typeText: \"None\",\n      shapeId: \"#empty\", // relates to the type property of a node\n      shape: (\n        <symbol viewBox=\"0 0 100 100\" id=\"empty\" key=\"0\">\n          <circle cx=\"50\" cy=\"50\" r=\"45\"></circle>\n        </symbol>\n      )\n    },\n    custom: { // required to show empty nodes\n      typeText: \"Custom\",\n      shapeId: \"#custom\", // relates to the type property of a node\n      shape: (\n        <symbol viewBox=\"0 0 50 25\" id=\"custom\" key=\"0\">\n          <ellipse cx=\"50\" cy=\"25\" rx=\"50\" ry=\"25\"></ellipse>\n        </symbol>\n      )\n    }\n  },\n  NodeSubtypes: {},\n  EdgeTypes: {\n    emptyEdge: {  // required to show empty edges\n      shapeId: \"#emptyEdge\",\n      shape: (\n        <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\" key=\"0\">\n          <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\"> </circle>\n        </symbol>\n      )\n    }\n  }\n}\n\nconst NODE_KEY = \"id\"       // Allows D3 to correctly update DOM\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graph: sample,\n      selected: {}\n    }\n  }\n\n  /* Define custom graph editing methods here */\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n\n    return (\n\n      <Container>\n          <div id='graph'>\n\n        <GraphView  ref='GraphView'\n                    nodeKey={NODE_KEY}\n                    nodes={nodes}\n                    edges={edges}\n                    selected={selected}\n                    nodeTypes={NodeTypes}\n                    nodeSubtypes={NodeSubtypes}\n                    edgeTypes={EdgeTypes}\n                    onSelectNode={this.onSelectNode}\n                    onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    onDeleteNode={this.onDeleteNode}\n                    onSelectEdge={this.onSelectEdge}\n                    onCreateEdge={this.onCreateEdge}\n                    onSwapEdge={this.onSwapEdge}\n                    onDeleteEdge={this.onDeleteEdge}/>\n      </div>\n      </Container>\n      \n    );\n  }\n\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}